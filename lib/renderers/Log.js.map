{
    "version": 3,
    "file": "Log.js",
    "sourceRoot": "",
    "sources": [
        "/src/renderers/Log.tsx"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "/**\n * @file 用于显示日志的组件，比如显示命令行的输出结果\n */\nimport React from 'react';\nimport {Renderer, RendererProps} from '../factory';\nimport {BaseSchema, SchemaTpl} from '../Schema';\nimport Ansi from 'ansi-to-react';\nimport {filter} from '../utils/tpl';\nimport {buildApi} from '../utils/api';\n\n/**\n * 日志展示组件\n * 文档：https://baidu.gitee.io/amis/docs/components/log\n */\nexport interface LogSchema extends BaseSchema {\n  /**\n   * 指定为 link 链接展示控件\n   */\n  type: 'log';\n\n  /**\n   * 自定义 CSS 类名\n   */\n  className?: string;\n\n  /**\n   * 获取日志的地址\n   */\n  source: string;\n\n  /**\n   * 控件高度\n   */\n  height?: number;\n\n  /**\n   * 是否自动滚动到最底部\n   */\n  autoScroll?: boolean;\n\n  /**\n   * 返回内容字符编码\n   */\n  encoding?: string;\n}\n\nexport interface LogProps\n  extends RendererProps,\n    Omit<LogSchema, 'type' | 'className'> {}\n\nexport interface LogState {\n  lastLine: string;\n  logs: string[];\n}\n\nexport class Log extends React.Component<LogProps, LogState> {\n  static defaultProps = {\n    height: 500,\n    autoScroll: true,\n    placeholder: 'loading',\n    encoding: 'utf-8'\n  };\n\n  isDone: boolean = false;\n\n  autoScroll: boolean = false;\n\n  logRef: React.RefObject<HTMLDivElement>;\n\n  state: LogState = {\n    lastLine: '',\n    logs: []\n  };\n\n  constructor(props: LogProps) {\n    super(props);\n    this.logRef = React.createRef();\n    this.autoScroll = props.autoScroll || false;\n    this.pauseOrResumeScrolling = this.pauseOrResumeScrolling.bind(this);\n  }\n\n  componentWillUnmount() {\n    if (this.logRef && this.logRef.current) {\n      this.logRef.current.removeEventListener(\n        'scroll',\n        this.pauseOrResumeScrolling\n      );\n    }\n  }\n\n  componentDidMount() {\n    if (this.autoScroll && this.logRef && this.logRef.current) {\n      this.logRef.current.addEventListener(\n        'scroll',\n        this.pauseOrResumeScrolling\n      );\n    }\n    if (this.props.source) {\n      this.loadLogs();\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.autoScroll && this.logRef && this.logRef.current) {\n      this.logRef.current.scrollTop = this.logRef.current.scrollHeight;\n    }\n  }\n\n  // 如果向上滚动就停止自动滚动，除非滚到底部\n  pauseOrResumeScrolling() {\n    if (this.logRef && this.logRef.current) {\n      const {scrollHeight, scrollTop, offsetHeight} = this.logRef.current;\n      this.autoScroll = scrollHeight - (scrollTop + offsetHeight) < 50;\n    }\n  }\n\n  async loadLogs() {\n    const {source, data, env, translate: __, encoding} = this.props;\n    // 因为这里返回结果是流式的，和普通 api 请求不一样，如果直接用 fetcher 经过 responseAdpater 可能会导致出错，所以就直接 fetch 了\n    const api = buildApi(source, data);\n    const res = await fetch(api.url);\n    if (res.status === 200) {\n      const body = res.body;\n      if (!body) {\n        return;\n      }\n      const reader = body.getReader();\n      let lastline = '';\n      let logs: string[] = [];\n      for (;;) {\n        let {done, value} = await reader.read();\n        if (value) {\n          let text = new TextDecoder(encoding).decode(value, {stream: true});\n          // 不考虑只有 \\r 换行符的情况，几乎没人用\n          const lines = text.split('\\n');\n          // 如果没有换行符就只更新最后一行\n          if (lines.length === 1) {\n            lastline += lines[0];\n            this.setState({\n              lastLine: lastline\n            });\n          } else {\n            // 将之前的数据补上\n            lines[0] = lastline + lines[0];\n            // 最后一个要么是空，要么是下一行的数据\n            lastline = lines.pop() || '';\n            logs = logs.concat(lines);\n            this.setState({\n              logs: logs,\n              lastLine: lastline\n            });\n          }\n        }\n\n        if (done) {\n          this.isDone = true;\n          return;\n        }\n      }\n    } else {\n      env.notify('error', __('fetchFailed'));\n    }\n  }\n\n  render() {\n    const {\n      source,\n      className,\n      classnames: cx,\n      placeholder,\n      height,\n      translate: __\n    } = this.props;\n\n    let loading = __(placeholder);\n\n    if (!source) {\n      loading = __('Log.mustHaveSource');\n    }\n\n    const lines = this.state.logs.map((line, index) => {\n      return (\n        <div className={cx('Log-line')} key={index}>\n          <Ansi useClasses>{line}</Ansi>\n        </div>\n      );\n    });\n\n    return (\n      <div\n        ref={this.logRef}\n        className={cx('Log', className)}\n        style={{height: height}}\n      >\n        {lines.length ? lines : loading}\n        <div className={cx('Log-line')} key=\"last\">\n          <code>{this.state.lastLine}</code>\n        </div>\n      </div>\n    );\n  }\n}\n\n@Renderer({\n  test: /(^|\\/)log$/,\n  name: 'log'\n})\nexport class LogRenderer extends Log {}\n"
    ]
}