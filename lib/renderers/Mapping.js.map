{
    "version": 3,
    "file": "Mapping.js",
    "sourceRoot": "",
    "sources": [
        "/src/renderers/Mapping.tsx"
    ],
    "names": [],
    "mappings": ";;;;AAAA,wDAA0B;AAC1B,sCAAmD;AAuCnD;IAAkC,wCAAqC;IAAvE;;IAkCA,CAAC;IA1BC,6BAAM,GAAN;;QACQ,IAAA,KAAwD,IAAI,CAAC,KAAK,EAAjE,SAAS,eAAA,EAAE,WAAW,iBAAA,EAAE,GAAG,SAAA,EAAE,MAAM,YAAA,EAAc,EAAE,gBAAc,CAAC;QACzE,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;QAE3B,IAAI,SAAS,GAAoB,CAC/B,wCAAM,SAAS,EAAC,YAAY,IAAE,WAAW,CAAQ,CAClD,CAAC;QAEF,GAAG;YACD,OAAO,GAAG,KAAK,QAAQ;gBACrB,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE;gBACZ,CAAC,CAAC,GAAG,KAAK,IAAI;oBACd,CAAC,CAAC,GAAG;oBACL,CAAC,CAAC,GAAG,KAAK,KAAK;wBACf,CAAC,CAAC,GAAG;wBACL,CAAC,CAAC,GAAG,CAAC,CAAC,oBAAoB;QAE/B,IAAI,OAAO,GAAG,KAAK,WAAW,IAAI,GAAG,IAAI,OAAC,GAAG,CAAC,GAAG,CAAC,mCAAI,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE;YAC/D,SAAS,GAAG,MAAM,CAChB,KAAK,QACL,GAAG,CAAC,GAAG,CAAC,mCAAI,GAAG,CAAC,GAAG,CAAC,CAAC,8CAA8C;aACpE,CAAC;SACH;QAED,OAAO,wCAAM,SAAS,EAAE,EAAE,CAAC,cAAc,EAAE,SAAS,CAAC,IAAG,SAAS,CAAQ,CAAC;IAC5E,CAAC;IAhCM,yBAAY,GAA0B;QAC3C,WAAW,EAAE,GAAG;QAChB,GAAG,EAAE;YACH,GAAG,EAAE,KAAK;SACX;KACF,CAAC;IA4BJ,mBAAC;CAAA,AAlCD,CAAkC,eAAK,CAAC,SAAS,GAkChD;AAlCY,oCAAY;AAwCzB;IAA0C,gDAAY;IAAtD;;IAAwD,CAAC;IAA5C,oBAAoB;QAJhC,kBAAQ,CAAC;YACR,IAAI,EAAE,wBAAwB;YAC9B,IAAI,EAAE,SAAS;SAChB,CAAC;OACW,oBAAoB,CAAwB;IAAD,2BAAC;CAAA,AAAzD,CAA0C,YAAY,GAAG;AAA5C,oDAAoB",
    "sourcesContent": [
        "import React from 'react';\nimport {Renderer, RendererProps} from '../factory';\nimport {ServiceStore, IServiceStore} from '../store/service';\nimport {Api, SchemaNode, PlainObject} from '../types';\nimport {filter} from '../utils/tpl';\nimport cx from 'classnames';\nimport {BaseSchema, SchemaTpl} from '../Schema';\n\n/**\n * Mapping 映射展示控件。\n * 文档：https://baidu.gitee.io/amis/docs/components/mapping\n */\nexport interface MappingSchema extends BaseSchema {\n  /**\n   * 指定为映射展示控件\n   */\n  type: 'map' | 'mapping';\n\n  /**\n   * 关联字段名。\n   */\n  name?: string;\n\n  /**\n   * 配置映射规则，值可以使用模板语法。当 key 为 * 时表示 else，也就是说值没有映射到任何规则时用 * 对应的值展示。\n   */\n  map?: {\n    [propName: string]: SchemaTpl;\n  };\n\n  /**\n   * 占位符\n   */\n  placeholder?: string;\n}\n\nexport interface MappingProps\n  extends RendererProps,\n    Omit<MappingSchema, 'type' | 'className'> {}\n\nexport class MappingField extends React.Component<MappingProps, object> {\n  static defaultProps: Partial<MappingProps> = {\n    placeholder: '-',\n    map: {\n      '*': '通配值'\n    }\n  };\n\n  render() {\n    const {className, placeholder, map, render, classnames: cx} = this.props;\n    let key = this.props.value;\n\n    let viewValue: React.ReactNode = (\n      <span className=\"text-muted\">{placeholder}</span>\n    );\n\n    key =\n      typeof key === 'string'\n        ? key.trim()\n        : key === true\n        ? '1'\n        : key === false\n        ? '0'\n        : key; // trim 一下，干掉一些空白字符。\n\n    if (typeof key !== 'undefined' && map && (map[key] ?? map['*'])) {\n      viewValue = render(\n        'tpl',\n        map[key] ?? map['*'] // 兼容平台旧用法：即 value 为 true 时映射 1 ，为 false 时映射 0\n      );\n    }\n\n    return <span className={cx('MappingField', className)}>{viewValue}</span>;\n  }\n}\n\n@Renderer({\n  test: /(^|\\/)(?:map|mapping)$/,\n  name: 'mapping'\n})\nexport class MappingFieldRenderer extends MappingField {}\n"
    ]
}