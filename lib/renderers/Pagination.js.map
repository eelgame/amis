{
    "version": 3,
    "file": "Pagination.js",
    "sourceRoot": "",
    "sources": [
        "/src/renderers/Pagination.tsx"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "import React from 'react';\nimport {Renderer, RendererProps} from '../factory';\nimport {autobind} from '../utils/helper';\nimport {Icon} from '../components/icons';\nimport {BaseSchema, SchemaClassName} from '../Schema';\n\nexport interface PaginationSchema extends BaseSchema {\n  type: 'pagination';\n\n  className?: SchemaClassName;\n\n  /**\n   * 是否显示快速跳转输入框\n   */\n  showPageInput?: boolean;\n\n  /**\n   * 模式，默认显示多个分页数字，如果只想简单显示可以配置成 `simple`。\n   */\n  mode?: 'simple' | 'normal';\n\n  /**\n   * 最多显示多少个分页按钮。\n   *\n   * @default 5\n   */\n  maxButtons?: number;\n}\n\nexport interface PaginationProps\n  extends RendererProps,\n    Omit<PaginationSchema, 'type' | 'className'> {\n  activePage: number;\n  lastPage: number;\n  hasNext: boolean;\n  maxButtons: number;\n  onPageChange: (page: number, perPage?: number) => void;\n}\n\nexport interface PaginationState {\n  pageNum: string;\n}\n\nexport default class Pagination extends React.Component<\n  PaginationProps,\n  PaginationState\n> {\n  static defaultProps = {\n    activePage: 1,\n    lastPage: 1,\n    maxButtons: 5,\n    mode: 'normal',\n    hasNext: false,\n    showPageInput: false\n  };\n\n  state = {\n    pageNum: String(this.props.activePage) || ''\n  };\n\n  componentWillReceiveProps(nextProps: PaginationProps) {\n    if (this.props.activePage !== nextProps.activePage) {\n      this.setState({\n        pageNum: String(nextProps.activePage) || ''\n      });\n    }\n  }\n\n  renderSimple() {\n    const {activePage, hasNext, onPageChange, classnames: cx} = this.props;\n\n    return (\n      <ul className={cx('Pagination', 'Pagination--sm')}>\n        <li\n          className={cx({\n            'is-disabled': activePage < 2\n          })}\n          onClick={\n            activePage < 2\n              ? e => e.preventDefault()\n              : () => onPageChange(activePage - 1)\n          }\n        >\n          <a>\n            <Icon icon=\"left-arrow\" className=\"icon\" />\n          </a>\n        </li>\n        <li\n          className={cx({\n            'is-disabled': !hasNext\n          })}\n          onClick={\n            !hasNext\n              ? e => e.preventDefault()\n              : () => onPageChange(activePage + 1)\n          }\n        >\n          <a>\n            <Icon icon=\"right-arrow\" className=\"icon\" />\n          </a>\n        </li>\n      </ul>\n    );\n  }\n\n  @autobind\n  handlePageChange(e: React.ChangeEvent<any>) {\n    const {lastPage} = this.props;\n    let value = e.currentTarget.value;\n\n    if (/^\\d+$/.test(value) && parseInt(value, 10) > lastPage) {\n      value = String(lastPage);\n    }\n\n    this.setState({pageNum: value});\n  }\n\n  renderNormal() {\n    let {\n      activePage,\n      lastPage,\n      maxButtons,\n      onPageChange,\n      classnames: cx,\n      showPageInput,\n      className,\n      translate: __\n    } = this.props;\n    const pageNum = this.state.pageNum;\n\n    let pageButtons: any = [];\n    let startPage: number;\n    let endPage: number;\n\n    if (activePage < (maxButtons - 1) / 2 + 2) {\n      maxButtons = activePage + (maxButtons - 1) / 2;\n    }\n\n    if (lastPage - activePage < (maxButtons - 1) / 2 + 2) {\n      maxButtons = lastPage - activePage + (maxButtons - 1) / 2 + 1;\n    }\n\n    if (maxButtons && maxButtons < lastPage) {\n      startPage = Math.max(\n        Math.min(\n          activePage - Math.floor(maxButtons / 2),\n          lastPage - maxButtons + 1\n        ),\n        1\n      );\n      endPage = startPage + maxButtons - 1;\n    } else {\n      startPage = 1;\n      endPage = lastPage;\n    }\n\n    for (let page = startPage; page <= endPage; ++page) {\n      pageButtons.push(\n        <li\n          onClick={() => onPageChange(page)}\n          key={page}\n          className={cx({\n            'is-active': page === activePage\n          })}\n        >\n          <a role=\"button\">{page}</a>\n        </li>\n      );\n    }\n\n    if (startPage > 1) {\n      if (startPage > 2) {\n        pageButtons.unshift(\n          <li onClick={() => onPageChange(startPage - 1)} key=\"prev-ellipsis\">\n            <a role=\"button\">...</a>\n          </li>\n        );\n      }\n\n      pageButtons.unshift(\n        <li\n          onClick={() => onPageChange(1)}\n          key={1}\n          className={cx({\n            'is-active': 1 === activePage\n          })}\n        >\n          <a role=\"button\">{1}</a>\n        </li>\n      );\n    }\n\n    if (endPage < lastPage) {\n      if (lastPage - endPage > 1) {\n        pageButtons.push(\n          <li\n            className={cx('Pagination-ellipsis')}\n            onClick={() => onPageChange(endPage + 1)}\n            key=\"next-ellipsis\"\n          >\n            <a role=\"button\">\n              <span>...</span>\n            </a>\n          </li>\n        );\n      }\n\n      pageButtons.push(\n        <li\n          onClick={() => onPageChange(lastPage)}\n          key={lastPage}\n          className={cx({\n            'is-active': lastPage === activePage\n          })}\n        >\n          <a role=\"button\">{lastPage}</a>\n        </li>\n      );\n    }\n\n    pageButtons.unshift(\n      <li\n        className={cx('Pagination-prev', {\n          'is-disabled': activePage === 1\n        })}\n        onClick={\n          activePage === 1\n            ? (e: any) => e.preventDefault()\n            : () => onPageChange(activePage - 1)\n        }\n        key=\"prev\"\n      >\n        <span>\n          <Icon icon=\"left-arrow\" className=\"icon\" />\n        </span>\n      </li>\n    );\n\n    pageButtons.push(\n      <li\n        className={cx('Pagination-next', {\n          'is-disabled': activePage === lastPage\n        })}\n        onClick={\n          activePage === lastPage\n            ? (e: any) => e.preventDefault()\n            : () => onPageChange(activePage + 1)\n        }\n        key=\"next\"\n      >\n        <span>\n          <Icon icon=\"right-arrow\" className=\"icon\" />\n        </span>\n      </li>\n    );\n\n    return (\n      <div className={cx('Pagination-wrap', className)}>\n        <ul className={cx('Pagination', 'Pagination--sm')}>{pageButtons}</ul>\n\n        {showPageInput === true || lastPage > 9 ? (\n          <div className={cx('Pagination-inputGroup')} key=\"toPage\">\n            {__('CRUD.paginationGoText')}\n            <input\n              type=\"text\"\n              onChange={this.handlePageChange}\n              onFocus={(e: any) => e.currentTarget.select()}\n              onKeyUp={(e: any) =>\n                e.keyCode == 13 &&\n                onPageChange(parseInt(e.currentTarget.value, 10))\n              }\n              value={pageNum}\n            />\n            {__('CRUD.paginationPageText')}\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n\n  render() {\n    const {mode} = this.props;\n\n    return mode === 'simple' ? this.renderSimple() : this.renderNormal();\n  }\n}\n\n@Renderer({\n  test: /(^|\\/)(?:pagination|pager)$/,\n  name: 'pagination'\n})\nexport class PaginationRenderer extends Pagination {}\n"
    ]
}