/// <reference types="lodash" />
import { SnapshotIn, Instance } from 'mobx-state-tree';
import { IFormStore, IFormItemStore } from './form';
export declare const UniqueGroup: import("mobx-state-tree").IModelType<{
    name: import("mobx-state-tree").ISimpleType<string>;
    itemsRef: import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>;
}, {
    readonly items: ({
        id: string;
        path: string;
        storeType: string;
        disposed: boolean;
        parentId: string;
        childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
        isFocused: boolean;
        type: string;
        unique: boolean;
        loading: boolean;
        required: boolean;
        tmpValue: any;
        rules: any;
        messages: any;
        errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
            msg: import("mobx-state-tree").IType<string | undefined, string, string>;
            tag: import("mobx-state-tree").IType<string | undefined, string, string>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
            msg: import("mobx-state-tree").IType<string | undefined, string, string>;
            tag: import("mobx-state-tree").IType<string | undefined, string, string>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
        name: string;
        itemId: string;
        unsetValueOnInvisible: boolean;
        itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
        validated: boolean;
        validating: boolean;
        multiple: boolean;
        delimiter: string;
        valueField: string;
        labelField: string;
        joinValues: boolean;
        extractValue: boolean;
        options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
        expressionsInOptions: boolean;
        selectFirst: boolean;
        autoFill: any;
        clearValueOnHidden: boolean;
        selectedOptions: any;
        filteredOptions: any;
        dialogSchema: any;
        dialogOpen: boolean;
        dialogData: any;
        resetValue: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        readonly parentStore: any;
        readonly __: any;
    } & {
        onChildStoreDispose(child: any): void;
        syncProps(props: any, prevProps: any, list?: string[]): void;
        dispose: (callback?: (() => void) | undefined) => void;
        addChildId: (id: string) => void;
        removeChildId: (id: string) => void;
    } & {
        readonly subFormItems: any;
        readonly form: any;
        readonly value: any;
        readonly prinstine: any;
        readonly errors: string[];
        readonly valid: boolean;
        readonly lastSelectValue: string;
        getSelectedOptions: (value?: any) => any[];
    } & {
        focus: () => void;
        blur: () => void;
        config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden }: {
            required?: boolean | undefined;
            unique?: boolean | undefined;
            value?: any;
            rules?: string | {
                [propName: string]: any;
            } | undefined;
            messages?: {
                [propName: string]: string;
            } | undefined;
            multiple?: boolean | undefined;
            delimiter?: string | undefined;
            valueField?: string | undefined;
            labelField?: string | undefined;
            joinValues?: boolean | undefined;
            extractValue?: boolean | undefined;
            type?: string | undefined;
            id?: string | undefined;
            selectFirst?: boolean | undefined;
            autoFill?: any;
            clearValueOnHidden?: boolean | undefined;
        }) => void;
        changeValue: (value: any, isPrintine?: boolean) => void;
        validate: (hook?: any) => Promise<boolean>;
        setError: (msg: string | string[], tag?: string) => void;
        addError: (msg: string | string[], tag?: string) => void;
        clearError: (tag?: string | undefined) => void;
        setOptions: (options: object[], onChange?: ((value: any) => void) | undefined) => void;
        loadOptions: (api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("../types").Payload | null>;
        deferLoadOptions: (option: any, api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined) => Promise<import("../types").Payload | null>;
        syncOptions: (originOptions?: any[] | undefined) => void;
        setLoading: (value: boolean) => void;
        setSubStore: (store: any) => void;
        getSubStore: () => any;
        reset: () => void;
        openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
        closeDialog: (result?: any) => void;
        syncAutoFill: (value?: any, isPrintine?: boolean) => void;
        changeTmpValue: (value: any) => void;
        addSubFormItem: (item: {
            id: string;
            path: string;
            storeType: string;
            disposed: boolean;
            parentId: string;
            childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            isFocused: boolean;
            type: string;
            unique: boolean;
            loading: boolean;
            required: boolean;
            tmpValue: any;
            rules: any;
            messages: any;
            errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
            name: string;
            itemId: string;
            unsetValueOnInvisible: boolean;
            itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            validated: boolean;
            validating: boolean;
            multiple: boolean;
            delimiter: string;
            valueField: string;
            labelField: string;
            joinValues: boolean;
            extractValue: boolean;
            options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
            expressionsInOptions: boolean;
            selectFirst: boolean;
            autoFill: any;
            clearValueOnHidden: boolean;
            selectedOptions: any;
            filteredOptions: any;
            dialogSchema: any;
            dialogOpen: boolean;
            dialogData: any;
            resetValue: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly parentStore: any;
            readonly __: any;
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly lastSelectValue: string;
            getSelectedOptions: (value?: any) => any[];
        } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        } & {
            isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            tmpValue: import("mobx-state-tree").IType<any, any, any>;
            rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            name: import("mobx-state-tree").ISimpleType<string>;
            itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
            unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
            valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
            labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
            joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
            expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            autoFill: import("mobx-state-tree").IType<any, any, any>;
            clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogSchema: import("mobx-state-tree").IType<any, any, any>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IType<any, any, any>;
            resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        }, {
            readonly parentStore: any;
            readonly __: any;
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly lastSelectValue: string;
            getSelectedOptions: (value?: any) => any[];
        } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        removeSubFormItem: (item: {
            id: string;
            path: string;
            storeType: string;
            disposed: boolean;
            parentId: string;
            childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            isFocused: boolean;
            type: string;
            unique: boolean;
            loading: boolean;
            required: boolean;
            tmpValue: any;
            rules: any;
            messages: any;
            errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
            name: string;
            itemId: string;
            unsetValueOnInvisible: boolean;
            itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            validated: boolean;
            validating: boolean;
            multiple: boolean;
            delimiter: string;
            valueField: string;
            labelField: string;
            joinValues: boolean;
            extractValue: boolean;
            options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
            expressionsInOptions: boolean;
            selectFirst: boolean;
            autoFill: any;
            clearValueOnHidden: boolean;
            selectedOptions: any;
            filteredOptions: any;
            dialogSchema: any;
            dialogOpen: boolean;
            dialogData: any;
            resetValue: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly parentStore: any;
            readonly __: any;
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly lastSelectValue: string;
            getSelectedOptions: (value?: any) => any[];
        } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        } & {
            isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            tmpValue: import("mobx-state-tree").IType<any, any, any>;
            rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            name: import("mobx-state-tree").ISimpleType<string>;
            itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
            unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
            valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
            labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
            joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
            expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            autoFill: import("mobx-state-tree").IType<any, any, any>;
            clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogSchema: import("mobx-state-tree").IType<any, any, any>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IType<any, any, any>;
            resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        }, {
            readonly parentStore: any;
            readonly __: any;
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly lastSelectValue: string;
            getSelectedOptions: (value?: any) => any[];
        } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        path: import("mobx-state-tree").IType<string | undefined, string, string>;
        storeType: import("mobx-state-tree").ISimpleType<string>;
        disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
        childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
    } & {
        isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        type: import("mobx-state-tree").IType<string | undefined, string, string>;
        unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        tmpValue: import("mobx-state-tree").IType<any, any, any>;
        rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
            msg: import("mobx-state-tree").IType<string | undefined, string, string>;
            tag: import("mobx-state-tree").IType<string | undefined, string, string>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
        name: import("mobx-state-tree").ISimpleType<string>;
        itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
        unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
        valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
        labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
        joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
        expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        autoFill: import("mobx-state-tree").IType<any, any, any>;
        clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        dialogSchema: import("mobx-state-tree").IType<any, any, any>;
        dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        dialogData: import("mobx-state-tree").IType<any, any, any>;
        resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
    }, {
        readonly parentStore: any;
        readonly __: any;
    } & {
        onChildStoreDispose(child: any): void;
        syncProps(props: any, prevProps: any, list?: string[]): void;
        dispose: (callback?: (() => void) | undefined) => void;
        addChildId: (id: string) => void;
        removeChildId: (id: string) => void;
    } & {
        readonly subFormItems: any;
        readonly form: any;
        readonly value: any;
        readonly prinstine: any;
        readonly errors: string[];
        readonly valid: boolean;
        readonly lastSelectValue: string;
        getSelectedOptions: (value?: any) => any[];
    } & {
        focus: () => void;
        blur: () => void;
        config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden }: {
            required?: boolean | undefined;
            unique?: boolean | undefined;
            value?: any;
            rules?: string | {
                [propName: string]: any;
            } | undefined;
            messages?: {
                [propName: string]: string;
            } | undefined;
            multiple?: boolean | undefined;
            delimiter?: string | undefined;
            valueField?: string | undefined;
            labelField?: string | undefined;
            joinValues?: boolean | undefined;
            extractValue?: boolean | undefined;
            type?: string | undefined;
            id?: string | undefined;
            selectFirst?: boolean | undefined;
            autoFill?: any;
            clearValueOnHidden?: boolean | undefined;
        }) => void;
        changeValue: (value: any, isPrintine?: boolean) => void;
        validate: (hook?: any) => Promise<boolean>;
        setError: (msg: string | string[], tag?: string) => void;
        addError: (msg: string | string[], tag?: string) => void;
        clearError: (tag?: string | undefined) => void;
        setOptions: (options: object[], onChange?: ((value: any) => void) | undefined) => void;
        loadOptions: (api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("../types").Payload | null>;
        deferLoadOptions: (option: any, api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined) => Promise<import("../types").Payload | null>;
        syncOptions: (originOptions?: any[] | undefined) => void;
        setLoading: (value: boolean) => void;
        setSubStore: (store: any) => void;
        getSubStore: () => any;
        reset: () => void;
        openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
        closeDialog: (result?: any) => void;
        syncAutoFill: (value?: any, isPrintine?: boolean) => void;
        changeTmpValue: (value: any) => void;
        addSubFormItem: (item: {
            id: string;
            path: string;
            storeType: string;
            disposed: boolean;
            parentId: string;
            childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            isFocused: boolean;
            type: string;
            unique: boolean;
            loading: boolean;
            required: boolean;
            tmpValue: any;
            rules: any;
            messages: any;
            errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
            name: string;
            itemId: string;
            unsetValueOnInvisible: boolean;
            itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            validated: boolean;
            validating: boolean;
            multiple: boolean;
            delimiter: string;
            valueField: string;
            labelField: string;
            joinValues: boolean;
            extractValue: boolean;
            options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
            expressionsInOptions: boolean;
            selectFirst: boolean;
            autoFill: any;
            clearValueOnHidden: boolean;
            selectedOptions: any;
            filteredOptions: any;
            dialogSchema: any;
            dialogOpen: boolean;
            dialogData: any;
            resetValue: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly parentStore: any;
            readonly __: any;
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly lastSelectValue: string;
            getSelectedOptions: (value?: any) => any[];
        } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        } & {
            isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            tmpValue: import("mobx-state-tree").IType<any, any, any>;
            rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            name: import("mobx-state-tree").ISimpleType<string>;
            itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
            unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
            valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
            labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
            joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
            expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            autoFill: import("mobx-state-tree").IType<any, any, any>;
            clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogSchema: import("mobx-state-tree").IType<any, any, any>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IType<any, any, any>;
            resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        }, {
            readonly parentStore: any;
            readonly __: any;
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly lastSelectValue: string;
            getSelectedOptions: (value?: any) => any[];
        } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        removeSubFormItem: (item: {
            id: string;
            path: string;
            storeType: string;
            disposed: boolean;
            parentId: string;
            childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            isFocused: boolean;
            type: string;
            unique: boolean;
            loading: boolean;
            required: boolean;
            tmpValue: any;
            rules: any;
            messages: any;
            errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
            name: string;
            itemId: string;
            unsetValueOnInvisible: boolean;
            itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            validated: boolean;
            validating: boolean;
            multiple: boolean;
            delimiter: string;
            valueField: string;
            labelField: string;
            joinValues: boolean;
            extractValue: boolean;
            options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
            expressionsInOptions: boolean;
            selectFirst: boolean;
            autoFill: any;
            clearValueOnHidden: boolean;
            selectedOptions: any;
            filteredOptions: any;
            dialogSchema: any;
            dialogOpen: boolean;
            dialogData: any;
            resetValue: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly parentStore: any;
            readonly __: any;
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly lastSelectValue: string;
            getSelectedOptions: (value?: any) => any[];
        } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        } & {
            isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            tmpValue: import("mobx-state-tree").IType<any, any, any>;
            rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            name: import("mobx-state-tree").ISimpleType<string>;
            itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
            unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
            valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
            labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
            joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
            expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            autoFill: import("mobx-state-tree").IType<any, any, any>;
            clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogSchema: import("mobx-state-tree").IType<any, any, any>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IType<any, any, any>;
            resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        }, {
            readonly parentStore: any;
            readonly __: any;
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly lastSelectValue: string;
            getSelectedOptions: (value?: any) => any[];
        } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
} & {
    removeItem(item: IFormItemStore): void;
    addItem(item: IFormItemStore): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export declare type IUniqueGroup = typeof UniqueGroup.Type;
export declare const ComboStore: import("mobx-state-tree").IModelType<{
    id: import("mobx-state-tree").ISimpleType<string>;
    path: import("mobx-state-tree").IType<string | undefined, string, string>;
    storeType: import("mobx-state-tree").ISimpleType<string>;
    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
} & {
    hasRemoteData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
    data: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
    initedAt: import("mobx-state-tree").IType<number | undefined, number, number>;
    updatedAt: import("mobx-state-tree").IType<number | undefined, number, number>;
    pristine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
    action: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    dialogData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
    drawerOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    drawerData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
} & {
    uniques: import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
        name: import("mobx-state-tree").ISimpleType<string>;
        itemsRef: import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>;
    }, {
        readonly items: ({
            id: string;
            path: string;
            storeType: string;
            disposed: boolean;
            parentId: string;
            childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            isFocused: boolean;
            type: string;
            unique: boolean;
            loading: boolean;
            required: boolean;
            tmpValue: any;
            rules: any;
            messages: any;
            errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
            name: string;
            itemId: string;
            unsetValueOnInvisible: boolean;
            itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            validated: boolean;
            validating: boolean;
            multiple: boolean;
            delimiter: string;
            valueField: string;
            labelField: string;
            joinValues: boolean;
            extractValue: boolean;
            options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
            expressionsInOptions: boolean;
            selectFirst: boolean;
            autoFill: any;
            clearValueOnHidden: boolean;
            selectedOptions: any;
            filteredOptions: any;
            dialogSchema: any;
            dialogOpen: boolean;
            dialogData: any;
            resetValue: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly parentStore: any;
            readonly __: any;
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly lastSelectValue: string;
            getSelectedOptions: (value?: any) => any[];
        } & {
            focus: () => void;
            blur: () => void;
            config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden }: {
                required?: boolean | undefined;
                unique?: boolean | undefined;
                value?: any;
                rules?: string | {
                    [propName: string]: any;
                } | undefined;
                messages?: {
                    [propName: string]: string;
                } | undefined;
                multiple?: boolean | undefined;
                delimiter?: string | undefined;
                valueField?: string | undefined;
                labelField?: string | undefined;
                joinValues?: boolean | undefined;
                extractValue?: boolean | undefined;
                type?: string | undefined;
                id?: string | undefined;
                selectFirst?: boolean | undefined;
                autoFill?: any;
                clearValueOnHidden?: boolean | undefined;
            }) => void;
            changeValue: (value: any, isPrintine?: boolean) => void;
            validate: (hook?: any) => Promise<boolean>;
            setError: (msg: string | string[], tag?: string) => void;
            addError: (msg: string | string[], tag?: string) => void;
            clearError: (tag?: string | undefined) => void;
            setOptions: (options: object[], onChange?: ((value: any) => void) | undefined) => void;
            loadOptions: (api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("../types").Payload | null>;
            deferLoadOptions: (option: any, api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined) => Promise<import("../types").Payload | null>;
            syncOptions: (originOptions?: any[] | undefined) => void;
            setLoading: (value: boolean) => void;
            setSubStore: (store: any) => void;
            getSubStore: () => any;
            reset: () => void;
            openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
            closeDialog: (result?: any) => void;
            syncAutoFill: (value?: any, isPrintine?: boolean) => void;
            changeTmpValue: (value: any) => void;
            addSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
            removeSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        } & {
            isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            tmpValue: import("mobx-state-tree").IType<any, any, any>;
            rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            name: import("mobx-state-tree").ISimpleType<string>;
            itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
            unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
            valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
            labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
            joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
            expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            autoFill: import("mobx-state-tree").IType<any, any, any>;
            clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogSchema: import("mobx-state-tree").IType<any, any, any>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IType<any, any, any>;
            resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        }, {
            readonly parentStore: any;
            readonly __: any;
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly lastSelectValue: string;
            getSelectedOptions: (value?: any) => any[];
        } & {
            focus: () => void;
            blur: () => void;
            config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden }: {
                required?: boolean | undefined;
                unique?: boolean | undefined;
                value?: any;
                rules?: string | {
                    [propName: string]: any;
                } | undefined;
                messages?: {
                    [propName: string]: string;
                } | undefined;
                multiple?: boolean | undefined;
                delimiter?: string | undefined;
                valueField?: string | undefined;
                labelField?: string | undefined;
                joinValues?: boolean | undefined;
                extractValue?: boolean | undefined;
                type?: string | undefined;
                id?: string | undefined;
                selectFirst?: boolean | undefined;
                autoFill?: any;
                clearValueOnHidden?: boolean | undefined;
            }) => void;
            changeValue: (value: any, isPrintine?: boolean) => void;
            validate: (hook?: any) => Promise<boolean>;
            setError: (msg: string | string[], tag?: string) => void;
            addError: (msg: string | string[], tag?: string) => void;
            clearError: (tag?: string | undefined) => void;
            setOptions: (options: object[], onChange?: ((value: any) => void) | undefined) => void;
            loadOptions: (api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("../types").Payload | null>;
            deferLoadOptions: (option: any, api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined) => Promise<import("../types").Payload | null>;
            syncOptions: (originOptions?: any[] | undefined) => void;
            setLoading: (value: boolean) => void;
            setSubStore: (store: any) => void;
            getSubStore: () => any;
            reset: () => void;
            openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
            closeDialog: (result?: any) => void;
            syncAutoFill: (value?: any, isPrintine?: boolean) => void;
            changeTmpValue: (value: any) => void;
            addSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
            removeSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
    } & {
        removeItem(item: IFormItemStore): void;
        addItem(item: IFormItemStore): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    formsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
    minLength: import("mobx-state-tree").IType<number | undefined, number, number>;
    maxLength: import("mobx-state-tree").IType<number | undefined, number, number>;
    length: import("mobx-state-tree").IType<number | undefined, number, number>;
    activeKey: import("mobx-state-tree").IType<number | undefined, number, number>;
}, {
    readonly parentStore: any;
    readonly __: any;
} & {
    onChildStoreDispose(child: any): void;
    syncProps(props: any, prevProps: any, list?: string[]): void;
    dispose: (callback?: (() => void) | undefined) => void;
    addChildId: (id: string) => void;
    removeChildId: (id: string) => void;
} & {
    initData(data?: object, skipSetPristine?: boolean): void;
    reset(): void;
    updateData(data?: object, tag?: object | undefined, replace?: boolean | undefined): void;
    setCurrentAction(action: object): void;
    openDialog(ctx: any, additonal?: object | undefined, callback?: ((ret: any) => void) | undefined): void;
    closeDialog(result?: any): void;
    openDrawer(ctx: any, additonal?: object | undefined, callback?: ((ret: any) => void) | undefined): void;
    closeDrawer(result?: any): void;
} & {
    readonly forms: ({
        id: string;
        path: string;
        storeType: string;
        disposed: boolean;
        parentId: string;
        childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
        hasRemoteData: boolean;
        data: any;
        initedAt: number;
        updatedAt: number;
        pristine: any;
        action: any;
        dialogOpen: boolean;
        dialogData: any;
        drawerOpen: boolean;
        drawerData: any;
        msg: string;
        error: boolean;
        fetching: boolean;
        saving: boolean;
        busying: boolean;
        checking: boolean;
        initializing: boolean;
        schema: any;
        schemaKey: string;
        inited: boolean;
        validated: boolean;
        submited: boolean;
        submiting: boolean;
        validating: boolean;
        savedData: any;
        itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
        canAccessSuperData: boolean;
        persistData: boolean;
        restError: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        readonly parentStore: any;
        readonly __: any;
    } & {
        onChildStoreDispose(child: any): void;
        syncProps(props: any, prevProps: any, list?: string[]): void;
        dispose: (callback?: (() => void) | undefined) => void;
        addChildId: (id: string) => void;
        removeChildId: (id: string) => void;
    } & {
        initData(data?: object, skipSetPristine?: boolean): void;
        reset(): void;
        updateData(data?: object, tag?: object | undefined, replace?: boolean | undefined): void;
        setCurrentAction(action: object): void;
        openDialog(ctx: any, additonal?: object | undefined, callback?: ((ret: any) => void) | undefined): void;
        closeDialog(result?: any): void;
        openDrawer(ctx: any, additonal?: object | undefined, callback?: ((ret: any) => void) | undefined): void;
        closeDrawer(result?: any): void;
    } & {
        readonly loading: boolean;
    } & {
        markFetching: (fetching?: boolean) => void;
        markSaving: (saving?: boolean) => void;
        markBusying: (busying?: boolean) => void;
        fetchInitData: (api: import("../types").Api, data?: object | undefined, options?: import("../types").fetchOptions | undefined) => Promise<any>;
        fetchData: (api: import("../types").Api, data?: object | undefined, options?: import("../types").fetchOptions | undefined) => Promise<any>;
        fetchWSData: (ws: string, afterDataFetch: (data: any) => any) => void;
        reInitData: (data: object | undefined, replace?: boolean) => void;
        updateMessage: (msg?: string | undefined, error?: boolean) => void;
        clearMessage: () => void;
        setHasRemoteData: () => void;
        saveRemote: (api: import("../types").Api, data?: object | undefined, options?: import("../types").fetchOptions | undefined) => Promise<any>;
        fetchSchema: (api: import("../types").Api, data?: object | undefined, options?: import("../types").fetchOptions | undefined) => Promise<any>;
        checkRemote: (api: import("../types").Api, data?: object | undefined, options?: import("../types").fetchOptions | undefined) => Promise<any>;
    } & {
        readonly loading: boolean;
        readonly items: ({
            id: string;
            path: string;
            storeType: string;
            disposed: boolean;
            parentId: string;
            childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            isFocused: boolean;
            type: string;
            unique: boolean;
            loading: boolean;
            required: boolean;
            tmpValue: any;
            rules: any;
            messages: any;
            errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
            name: string;
            itemId: string;
            unsetValueOnInvisible: boolean;
            itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            validated: boolean;
            validating: boolean;
            multiple: boolean;
            delimiter: string;
            valueField: string;
            labelField: string;
            joinValues: boolean;
            extractValue: boolean;
            options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
            expressionsInOptions: boolean;
            selectFirst: boolean;
            autoFill: any;
            clearValueOnHidden: boolean;
            selectedOptions: any;
            filteredOptions: any;
            dialogSchema: any;
            dialogOpen: boolean;
            dialogData: any;
            resetValue: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly parentStore: any;
            readonly __: any;
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly lastSelectValue: string;
            getSelectedOptions: (value?: any) => any[];
        } & {
            focus: () => void;
            blur: () => void;
            config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden }: {
                required?: boolean | undefined;
                unique?: boolean | undefined;
                value?: any;
                rules?: string | {
                    [propName: string]: any;
                } | undefined;
                messages?: {
                    [propName: string]: string;
                } | undefined;
                multiple?: boolean | undefined;
                delimiter?: string | undefined;
                valueField?: string | undefined;
                labelField?: string | undefined;
                joinValues?: boolean | undefined;
                extractValue?: boolean | undefined;
                type?: string | undefined;
                id?: string | undefined;
                selectFirst?: boolean | undefined;
                autoFill?: any;
                clearValueOnHidden?: boolean | undefined;
            }) => void;
            changeValue: (value: any, isPrintine?: boolean) => void;
            validate: (hook?: any) => Promise<boolean>;
            setError: (msg: string | string[], tag?: string) => void;
            addError: (msg: string | string[], tag?: string) => void;
            clearError: (tag?: string | undefined) => void;
            setOptions: (options: object[], onChange?: ((value: any) => void) | undefined) => void;
            loadOptions: (api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("../types").Payload | null>;
            deferLoadOptions: (option: any, api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined) => Promise<import("../types").Payload | null>;
            syncOptions: (originOptions?: any[] | undefined) => void;
            setLoading: (value: boolean) => void;
            setSubStore: (store: any) => void;
            getSubStore: () => any;
            reset: () => void;
            openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
            closeDialog: (result?: any) => void;
            syncAutoFill: (value?: any, isPrintine?: boolean) => void;
            changeTmpValue: (value: any) => void;
            addSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
            removeSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        } & {
            isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            tmpValue: import("mobx-state-tree").IType<any, any, any>;
            rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            name: import("mobx-state-tree").ISimpleType<string>;
            itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
            unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
            valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
            labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
            joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
            expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            autoFill: import("mobx-state-tree").IType<any, any, any>;
            clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogSchema: import("mobx-state-tree").IType<any, any, any>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IType<any, any, any>;
            resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        }, {
            readonly parentStore: any;
            readonly __: any;
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly lastSelectValue: string;
            getSelectedOptions: (value?: any) => any[];
        } & {
            focus: () => void;
            blur: () => void;
            config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden }: {
                required?: boolean | undefined;
                unique?: boolean | undefined;
                value?: any;
                rules?: string | {
                    [propName: string]: any;
                } | undefined;
                messages?: {
                    [propName: string]: string;
                } | undefined;
                multiple?: boolean | undefined;
                delimiter?: string | undefined;
                valueField?: string | undefined;
                labelField?: string | undefined;
                joinValues?: boolean | undefined;
                extractValue?: boolean | undefined;
                type?: string | undefined;
                id?: string | undefined;
                selectFirst?: boolean | undefined;
                autoFill?: any;
                clearValueOnHidden?: boolean | undefined;
            }) => void;
            changeValue: (value: any, isPrintine?: boolean) => void;
            validate: (hook?: any) => Promise<boolean>;
            setError: (msg: string | string[], tag?: string) => void;
            addError: (msg: string | string[], tag?: string) => void;
            clearError: (tag?: string | undefined) => void;
            setOptions: (options: object[], onChange?: ((value: any) => void) | undefined) => void;
            loadOptions: (api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("../types").Payload | null>;
            deferLoadOptions: (option: any, api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined) => Promise<import("../types").Payload | null>;
            syncOptions: (originOptions?: any[] | undefined) => void;
            setLoading: (value: boolean) => void;
            setSubStore: (store: any) => void;
            getSubStore: () => any;
            reset: () => void;
            openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
            closeDialog: (result?: any) => void;
            syncAutoFill: (value?: any, isPrintine?: boolean) => void;
            changeTmpValue: (value: any) => void;
            addSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
            removeSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
        readonly errors: {
            [propName: string]: string[];
        };
        getValueByName(name: string): any;
        getPristineValueByName(name: string): any;
        getItemById(id: string): ({
            id: string;
            path: string;
            storeType: string;
            disposed: boolean;
            parentId: string;
            childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            isFocused: boolean;
            type: string;
            unique: boolean;
            loading: boolean;
            required: boolean;
            tmpValue: any;
            rules: any;
            messages: any;
            errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
            name: string;
            itemId: string;
            unsetValueOnInvisible: boolean;
            itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            validated: boolean;
            validating: boolean;
            multiple: boolean;
            delimiter: string;
            valueField: string;
            labelField: string;
            joinValues: boolean;
            extractValue: boolean;
            options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
            expressionsInOptions: boolean;
            selectFirst: boolean;
            autoFill: any;
            clearValueOnHidden: boolean;
            selectedOptions: any;
            filteredOptions: any;
            dialogSchema: any;
            dialogOpen: boolean;
            dialogData: any;
            resetValue: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly parentStore: any;
            readonly __: any;
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly lastSelectValue: string;
            getSelectedOptions: (value?: any) => any[];
        } & {
            focus: () => void;
            blur: () => void;
            config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden }: {
                required?: boolean | undefined;
                unique?: boolean | undefined;
                value?: any;
                rules?: string | {
                    [propName: string]: any;
                } | undefined;
                messages?: {
                    [propName: string]: string;
                } | undefined;
                multiple?: boolean | undefined;
                delimiter?: string | undefined;
                valueField?: string | undefined;
                labelField?: string | undefined;
                joinValues?: boolean | undefined;
                extractValue?: boolean | undefined;
                type?: string | undefined;
                id?: string | undefined;
                selectFirst?: boolean | undefined;
                autoFill?: any;
                clearValueOnHidden?: boolean | undefined;
            }) => void;
            changeValue: (value: any, isPrintine?: boolean) => void;
            validate: (hook?: any) => Promise<boolean>;
            setError: (msg: string | string[], tag?: string) => void;
            addError: (msg: string | string[], tag?: string) => void;
            clearError: (tag?: string | undefined) => void;
            setOptions: (options: object[], onChange?: ((value: any) => void) | undefined) => void;
            loadOptions: (api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("../types").Payload | null>;
            deferLoadOptions: (option: any, api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined) => Promise<import("../types").Payload | null>;
            syncOptions: (originOptions?: any[] | undefined) => void;
            setLoading: (value: boolean) => void;
            setSubStore: (store: any) => void;
            getSubStore: () => any;
            reset: () => void;
            openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
            closeDialog: (result?: any) => void;
            syncAutoFill: (value?: any, isPrintine?: boolean) => void;
            changeTmpValue: (value: any) => void;
            addSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
            removeSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        } & {
            isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            tmpValue: import("mobx-state-tree").IType<any, any, any>;
            rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            name: import("mobx-state-tree").ISimpleType<string>;
            itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
            unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
            valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
            labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
            joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
            expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            autoFill: import("mobx-state-tree").IType<any, any, any>;
            clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogSchema: import("mobx-state-tree").IType<any, any, any>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IType<any, any, any>;
            resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        }, {
            readonly parentStore: any;
            readonly __: any;
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly lastSelectValue: string;
            getSelectedOptions: (value?: any) => any[];
        } & {
            focus: () => void;
            blur: () => void;
            config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden }: {
                required?: boolean | undefined;
                unique?: boolean | undefined;
                value?: any;
                rules?: string | {
                    [propName: string]: any;
                } | undefined;
                messages?: {
                    [propName: string]: string;
                } | undefined;
                multiple?: boolean | undefined;
                delimiter?: string | undefined;
                valueField?: string | undefined;
                labelField?: string | undefined;
                joinValues?: boolean | undefined;
                extractValue?: boolean | undefined;
                type?: string | undefined;
                id?: string | undefined;
                selectFirst?: boolean | undefined;
                autoFill?: any;
                clearValueOnHidden?: boolean | undefined;
            }) => void;
            changeValue: (value: any, isPrintine?: boolean) => void;
            validate: (hook?: any) => Promise<boolean>;
            setError: (msg: string | string[], tag?: string) => void;
            addError: (msg: string | string[], tag?: string) => void;
            clearError: (tag?: string | undefined) => void;
            setOptions: (options: object[], onChange?: ((value: any) => void) | undefined) => void;
            loadOptions: (api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("../types").Payload | null>;
            deferLoadOptions: (option: any, api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined) => Promise<import("../types").Payload | null>;
            syncOptions: (originOptions?: any[] | undefined) => void;
            setLoading: (value: boolean) => void;
            setSubStore: (store: any) => void;
            getSubStore: () => any;
            reset: () => void;
            openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
            closeDialog: (result?: any) => void;
            syncAutoFill: (value?: any, isPrintine?: boolean) => void;
            changeTmpValue: (value: any) => void;
            addSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
            removeSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined; /**
         * name 值有两种类型：
         * 1. 数字索引，出现在多条模式下，这个时候，需要返回当前索引下的form，并且用于下一层的遍历搜索
         * 2. 普通的表单项 name 值，出现在单条模式下，当前这层查找已经结束，所以要返回当前找到的items，而不能返回form
         *
         * @param name 查找的name
         */
        getItemByName(name: string): ({
            id: string;
            path: string;
            storeType: string;
            disposed: boolean;
            parentId: string;
            childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            isFocused: boolean;
            type: string;
            unique: boolean;
            loading: boolean;
            required: boolean;
            tmpValue: any;
            rules: any;
            messages: any;
            errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
            name: string;
            itemId: string;
            unsetValueOnInvisible: boolean;
            itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            validated: boolean;
            validating: boolean;
            multiple: boolean;
            delimiter: string;
            valueField: string;
            labelField: string;
            joinValues: boolean;
            extractValue: boolean;
            options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
            expressionsInOptions: boolean;
            selectFirst: boolean;
            autoFill: any;
            clearValueOnHidden: boolean;
            selectedOptions: any;
            filteredOptions: any;
            dialogSchema: any;
            dialogOpen: boolean;
            dialogData: any;
            resetValue: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly parentStore: any;
            readonly __: any;
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly lastSelectValue: string;
            getSelectedOptions: (value?: any) => any[];
        } & {
            focus: () => void;
            blur: () => void;
            config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden }: {
                required?: boolean | undefined;
                unique?: boolean | undefined;
                value?: any;
                rules?: string | {
                    [propName: string]: any;
                } | undefined;
                messages?: {
                    [propName: string]: string;
                } | undefined;
                multiple?: boolean | undefined;
                delimiter?: string | undefined;
                valueField?: string | undefined;
                labelField?: string | undefined;
                joinValues?: boolean | undefined;
                extractValue?: boolean | undefined;
                type?: string | undefined;
                id?: string | undefined;
                selectFirst?: boolean | undefined;
                autoFill?: any;
                clearValueOnHidden?: boolean | undefined;
            }) => void;
            changeValue: (value: any, isPrintine?: boolean) => void;
            validate: (hook?: any) => Promise<boolean>;
            setError: (msg: string | string[], tag?: string) => void;
            addError: (msg: string | string[], tag?: string) => void;
            clearError: (tag?: string | undefined) => void;
            setOptions: (options: object[], onChange?: ((value: any) => void) | undefined) => void;
            loadOptions: (api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("../types").Payload | null>;
            deferLoadOptions: (option: any, api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined) => Promise<import("../types").Payload | null>;
            syncOptions: (originOptions?: any[] | undefined) => void;
            setLoading: (value: boolean) => void;
            setSubStore: (store: any) => void;
            getSubStore: () => any;
            reset: () => void;
            openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
            closeDialog: (result?: any) => void;
            syncAutoFill: (value?: any, isPrintine?: boolean) => void;
            changeTmpValue: (value: any) => void;
            addSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
            removeSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        } & {
            isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            tmpValue: import("mobx-state-tree").IType<any, any, any>;
            rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            name: import("mobx-state-tree").ISimpleType<string>;
            itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
            unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
            valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
            labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
            joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
            expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            autoFill: import("mobx-state-tree").IType<any, any, any>;
            clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogSchema: import("mobx-state-tree").IType<any, any, any>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IType<any, any, any>;
            resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        }, {
            readonly parentStore: any;
            readonly __: any;
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly lastSelectValue: string;
            getSelectedOptions: (value?: any) => any[];
        } & {
            focus: () => void;
            blur: () => void;
            config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden }: {
                required?: boolean | undefined;
                unique?: boolean | undefined;
                value?: any;
                rules?: string | {
                    [propName: string]: any;
                } | undefined;
                messages?: {
                    [propName: string]: string;
                } | undefined;
                multiple?: boolean | undefined;
                delimiter?: string | undefined;
                valueField?: string | undefined;
                labelField?: string | undefined;
                joinValues?: boolean | undefined;
                extractValue?: boolean | undefined;
                type?: string | undefined;
                id?: string | undefined;
                selectFirst?: boolean | undefined;
                autoFill?: any;
                clearValueOnHidden?: boolean | undefined;
            }) => void;
            changeValue: (value: any, isPrintine?: boolean) => void;
            validate: (hook?: any) => Promise<boolean>;
            setError: (msg: string | string[], tag?: string) => void;
            addError: (msg: string | string[], tag?: string) => void;
            clearError: (tag?: string | undefined) => void;
            setOptions: (options: object[], onChange?: ((value: any) => void) | undefined) => void;
            loadOptions: (api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("../types").Payload | null>;
            deferLoadOptions: (option: any, api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined) => Promise<import("../types").Payload | null>;
            syncOptions: (originOptions?: any[] | undefined) => void;
            setLoading: (value: boolean) => void;
            setSubStore: (store: any) => void;
            getSubStore: () => any;
            reset: () => void;
            openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
            closeDialog: (result?: any) => void;
            syncAutoFill: (value?: any, isPrintine?: boolean) => void;
            changeTmpValue: (value: any) => void;
            addSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
            removeSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined;
        getItemsByName(name: string): ({
            id: string;
            path: string;
            storeType: string;
            disposed: boolean;
            parentId: string;
            childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            isFocused: boolean;
            type: string;
            unique: boolean;
            loading: boolean;
            required: boolean;
            tmpValue: any;
            rules: any;
            messages: any;
            errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
            name: string;
            itemId: string;
            unsetValueOnInvisible: boolean;
            itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            validated: boolean;
            validating: boolean;
            multiple: boolean;
            delimiter: string;
            valueField: string;
            labelField: string;
            joinValues: boolean;
            extractValue: boolean;
            options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
            expressionsInOptions: boolean;
            selectFirst: boolean;
            autoFill: any;
            clearValueOnHidden: boolean;
            selectedOptions: any;
            filteredOptions: any;
            dialogSchema: any;
            dialogOpen: boolean;
            dialogData: any;
            resetValue: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly parentStore: any;
            readonly __: any;
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly lastSelectValue: string;
            getSelectedOptions: (value?: any) => any[];
        } & {
            focus: () => void;
            blur: () => void;
            config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden }: {
                required?: boolean | undefined;
                unique?: boolean | undefined;
                value?: any;
                rules?: string | {
                    [propName: string]: any;
                } | undefined;
                messages?: {
                    [propName: string]: string;
                } | undefined;
                multiple?: boolean | undefined;
                delimiter?: string | undefined;
                valueField?: string | undefined;
                labelField?: string | undefined;
                joinValues?: boolean | undefined;
                extractValue?: boolean | undefined;
                type?: string | undefined;
                id?: string | undefined;
                selectFirst?: boolean | undefined;
                autoFill?: any;
                clearValueOnHidden?: boolean | undefined;
            }) => void;
            changeValue: (value: any, isPrintine?: boolean) => void;
            validate: (hook?: any) => Promise<boolean>;
            setError: (msg: string | string[], tag?: string) => void;
            addError: (msg: string | string[], tag?: string) => void;
            clearError: (tag?: string | undefined) => void;
            setOptions: (options: object[], onChange?: ((value: any) => void) | undefined) => void;
            loadOptions: (api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("../types").Payload | null>;
            deferLoadOptions: (option: any, api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined) => Promise<import("../types").Payload | null>;
            syncOptions: (originOptions?: any[] | undefined) => void;
            setLoading: (value: boolean) => void;
            setSubStore: (store: any) => void;
            getSubStore: () => any;
            reset: () => void;
            openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
            closeDialog: (result?: any) => void;
            syncAutoFill: (value?: any, isPrintine?: boolean) => void;
            changeTmpValue: (value: any) => void;
            addSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
            removeSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        } & {
            isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            tmpValue: import("mobx-state-tree").IType<any, any, any>;
            rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            name: import("mobx-state-tree").ISimpleType<string>;
            itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
            unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
            valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
            labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
            joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
            expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            autoFill: import("mobx-state-tree").IType<any, any, any>;
            clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogSchema: import("mobx-state-tree").IType<any, any, any>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IType<any, any, any>;
            resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        }, {
            readonly parentStore: any;
            readonly __: any;
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly lastSelectValue: string;
            getSelectedOptions: (value?: any) => any[];
        } & {
            focus: () => void;
            blur: () => void;
            config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden }: {
                required?: boolean | undefined;
                unique?: boolean | undefined;
                value?: any;
                rules?: string | {
                    [propName: string]: any;
                } | undefined;
                messages?: {
                    [propName: string]: string;
                } | undefined;
                multiple?: boolean | undefined;
                delimiter?: string | undefined;
                valueField?: string | undefined;
                labelField?: string | undefined;
                joinValues?: boolean | undefined;
                extractValue?: boolean | undefined;
                type?: string | undefined;
                id?: string | undefined;
                selectFirst?: boolean | undefined;
                autoFill?: any;
                clearValueOnHidden?: boolean | undefined;
            }) => void;
            changeValue: (value: any, isPrintine?: boolean) => void;
            validate: (hook?: any) => Promise<boolean>;
            setError: (msg: string | string[], tag?: string) => void;
            addError: (msg: string | string[], tag?: string) => void;
            clearError: (tag?: string | undefined) => void;
            setOptions: (options: object[], onChange?: ((value: any) => void) | undefined) => void;
            loadOptions: (api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("../types").Payload | null>;
            deferLoadOptions: (option: any, api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined) => Promise<import("../types").Payload | null>;
            syncOptions: (originOptions?: any[] | undefined) => void;
            setLoading: (value: boolean) => void;
            setSubStore: (store: any) => void;
            getSubStore: () => any;
            reset: () => void;
            openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
            closeDialog: (result?: any) => void;
            syncAutoFill: (value?: any, isPrintine?: boolean) => void;
            changeTmpValue: (value: any) => void;
            addSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
            removeSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
        readonly valid: boolean;
        readonly isPristine: boolean;
        readonly modified: boolean;
    } & {
        setInited: (value: boolean) => void;
        setValues: (values: object, tag?: object | undefined, replace?: boolean | undefined) => void;
        setValueByName: (name: string, value: any, isPristine?: boolean, force?: boolean) => void;
        trimValues: () => void;
        submit: (fn?: ((values: object) => Promise<any>) | undefined, hooks?: (() => Promise<any>)[] | undefined, failedMessage?: string | undefined) => Promise<any>;
        validate: (hooks?: (() => Promise<any>)[] | undefined, forceValidate?: boolean | undefined) => Promise<boolean>;
        validateFields: (fields: string[]) => Promise<boolean>;
        clearErrors: () => void;
        saveRemote: (api: import("../types").Api, data?: object | undefined, options?: import("../types").fetchOptions | undefined) => Promise<any>;
        reset: (cb?: ((data: any) => void) | undefined, resetData?: boolean) => void;
        addFormItem: (item: {
            id: string;
            path: string;
            storeType: string;
            disposed: boolean;
            parentId: string;
            childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            isFocused: boolean;
            type: string;
            unique: boolean;
            loading: boolean;
            required: boolean;
            tmpValue: any;
            rules: any;
            messages: any;
            errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
            name: string;
            itemId: string;
            unsetValueOnInvisible: boolean;
            itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            validated: boolean;
            validating: boolean;
            multiple: boolean;
            delimiter: string;
            valueField: string;
            labelField: string;
            joinValues: boolean;
            extractValue: boolean;
            options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
            expressionsInOptions: boolean;
            selectFirst: boolean;
            autoFill: any;
            clearValueOnHidden: boolean;
            selectedOptions: any;
            filteredOptions: any;
            dialogSchema: any;
            dialogOpen: boolean;
            dialogData: any;
            resetValue: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly parentStore: any;
            readonly __: any;
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly lastSelectValue: string;
            getSelectedOptions: (value?: any) => any[];
        } & {
            focus: () => void;
            blur: () => void;
            config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden }: {
                required?: boolean | undefined;
                unique?: boolean | undefined;
                value?: any;
                rules?: string | {
                    [propName: string]: any;
                } | undefined;
                messages?: {
                    [propName: string]: string;
                } | undefined;
                multiple?: boolean | undefined;
                delimiter?: string | undefined;
                valueField?: string | undefined;
                labelField?: string | undefined;
                joinValues?: boolean | undefined;
                extractValue?: boolean | undefined;
                type?: string | undefined;
                id?: string | undefined;
                selectFirst?: boolean | undefined;
                autoFill?: any;
                clearValueOnHidden?: boolean | undefined;
            }) => void;
            changeValue: (value: any, isPrintine?: boolean) => void;
            validate: (hook?: any) => Promise<boolean>;
            setError: (msg: string | string[], tag?: string) => void;
            addError: (msg: string | string[], tag?: string) => void;
            clearError: (tag?: string | undefined) => void;
            setOptions: (options: object[], onChange?: ((value: any) => void) | undefined) => void;
            loadOptions: (api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("../types").Payload | null>;
            deferLoadOptions: (option: any, api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined) => Promise<import("../types").Payload | null>;
            syncOptions: (originOptions?: any[] | undefined) => void;
            setLoading: (value: boolean) => void;
            setSubStore: (store: any) => void;
            getSubStore: () => any;
            reset: () => void;
            openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
            closeDialog: (result?: any) => void;
            syncAutoFill: (value?: any, isPrintine?: boolean) => void;
            changeTmpValue: (value: any) => void;
            addSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
            removeSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        } & {
            isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            tmpValue: import("mobx-state-tree").IType<any, any, any>;
            rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            name: import("mobx-state-tree").ISimpleType<string>;
            itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
            unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
            valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
            labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
            joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
            expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            autoFill: import("mobx-state-tree").IType<any, any, any>;
            clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogSchema: import("mobx-state-tree").IType<any, any, any>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IType<any, any, any>;
            resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        }, {
            readonly parentStore: any;
            readonly __: any;
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly lastSelectValue: string;
            getSelectedOptions: (value?: any) => any[];
        } & {
            focus: () => void;
            blur: () => void;
            config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden }: {
                required?: boolean | undefined;
                unique?: boolean | undefined;
                value?: any;
                rules?: string | {
                    [propName: string]: any;
                } | undefined;
                messages?: {
                    [propName: string]: string;
                } | undefined;
                multiple?: boolean | undefined;
                delimiter?: string | undefined;
                valueField?: string | undefined;
                labelField?: string | undefined;
                joinValues?: boolean | undefined;
                extractValue?: boolean | undefined;
                type?: string | undefined;
                id?: string | undefined;
                selectFirst?: boolean | undefined;
                autoFill?: any;
                clearValueOnHidden?: boolean | undefined;
            }) => void;
            changeValue: (value: any, isPrintine?: boolean) => void;
            validate: (hook?: any) => Promise<boolean>;
            setError: (msg: string | string[], tag?: string) => void;
            addError: (msg: string | string[], tag?: string) => void;
            clearError: (tag?: string | undefined) => void;
            setOptions: (options: object[], onChange?: ((value: any) => void) | undefined) => void;
            loadOptions: (api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("../types").Payload | null>;
            deferLoadOptions: (option: any, api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined) => Promise<import("../types").Payload | null>;
            syncOptions: (originOptions?: any[] | undefined) => void;
            setLoading: (value: boolean) => void;
            setSubStore: (store: any) => void;
            getSubStore: () => any;
            reset: () => void;
            openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
            closeDialog: (result?: any) => void;
            syncAutoFill: (value?: any, isPrintine?: boolean) => void;
            changeTmpValue: (value: any) => void;
            addSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
            removeSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        removeFormItem: (item: {
            id: string;
            path: string;
            storeType: string;
            disposed: boolean;
            parentId: string;
            childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            isFocused: boolean;
            type: string;
            unique: boolean;
            loading: boolean;
            required: boolean;
            tmpValue: any;
            rules: any;
            messages: any;
            errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
            name: string;
            itemId: string;
            unsetValueOnInvisible: boolean;
            itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            validated: boolean;
            validating: boolean;
            multiple: boolean;
            delimiter: string;
            valueField: string;
            labelField: string;
            joinValues: boolean;
            extractValue: boolean;
            options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
            expressionsInOptions: boolean;
            selectFirst: boolean;
            autoFill: any;
            clearValueOnHidden: boolean;
            selectedOptions: any;
            filteredOptions: any;
            dialogSchema: any;
            dialogOpen: boolean;
            dialogData: any;
            resetValue: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly parentStore: any;
            readonly __: any;
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly lastSelectValue: string;
            getSelectedOptions: (value?: any) => any[];
        } & {
            focus: () => void;
            blur: () => void;
            config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden }: {
                required?: boolean | undefined;
                unique?: boolean | undefined;
                value?: any;
                rules?: string | {
                    [propName: string]: any;
                } | undefined;
                messages?: {
                    [propName: string]: string;
                } | undefined;
                multiple?: boolean | undefined;
                delimiter?: string | undefined;
                valueField?: string | undefined;
                labelField?: string | undefined;
                joinValues?: boolean | undefined;
                extractValue?: boolean | undefined;
                type?: string | undefined;
                id?: string | undefined;
                selectFirst?: boolean | undefined;
                autoFill?: any;
                clearValueOnHidden?: boolean | undefined;
            }) => void;
            changeValue: (value: any, isPrintine?: boolean) => void;
            validate: (hook?: any) => Promise<boolean>;
            setError: (msg: string | string[], tag?: string) => void;
            addError: (msg: string | string[], tag?: string) => void;
            clearError: (tag?: string | undefined) => void;
            setOptions: (options: object[], onChange?: ((value: any) => void) | undefined) => void;
            loadOptions: (api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("../types").Payload | null>;
            deferLoadOptions: (option: any, api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined) => Promise<import("../types").Payload | null>;
            syncOptions: (originOptions?: any[] | undefined) => void;
            setLoading: (value: boolean) => void;
            setSubStore: (store: any) => void;
            getSubStore: () => any;
            reset: () => void;
            openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
            closeDialog: (result?: any) => void;
            syncAutoFill: (value?: any, isPrintine?: boolean) => void;
            changeTmpValue: (value: any) => void;
            addSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
            removeSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        } & {
            isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            tmpValue: import("mobx-state-tree").IType<any, any, any>;
            rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            name: import("mobx-state-tree").ISimpleType<string>;
            itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
            unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
            valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
            labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
            joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
            expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            autoFill: import("mobx-state-tree").IType<any, any, any>;
            clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogSchema: import("mobx-state-tree").IType<any, any, any>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IType<any, any, any>;
            resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        }, {
            readonly parentStore: any;
            readonly __: any;
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly lastSelectValue: string;
            getSelectedOptions: (value?: any) => any[];
        } & {
            focus: () => void;
            blur: () => void;
            config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden }: {
                required?: boolean | undefined;
                unique?: boolean | undefined;
                value?: any;
                rules?: string | {
                    [propName: string]: any;
                } | undefined;
                messages?: {
                    [propName: string]: string;
                } | undefined;
                multiple?: boolean | undefined;
                delimiter?: string | undefined;
                valueField?: string | undefined;
                labelField?: string | undefined;
                joinValues?: boolean | undefined;
                extractValue?: boolean | undefined;
                type?: string | undefined;
                id?: string | undefined;
                selectFirst?: boolean | undefined;
                autoFill?: any;
                clearValueOnHidden?: boolean | undefined;
            }) => void;
            changeValue: (value: any, isPrintine?: boolean) => void;
            validate: (hook?: any) => Promise<boolean>;
            setError: (msg: string | string[], tag?: string) => void;
            addError: (msg: string | string[], tag?: string) => void;
            clearError: (tag?: string | undefined) => void;
            setOptions: (options: object[], onChange?: ((value: any) => void) | undefined) => void;
            loadOptions: (api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("../types").Payload | null>;
            deferLoadOptions: (option: any, api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined) => Promise<import("../types").Payload | null>;
            syncOptions: (originOptions?: any[] | undefined) => void;
            setLoading: (value: boolean) => void;
            setSubStore: (store: any) => void;
            getSubStore: () => any;
            reset: () => void;
            openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
            closeDialog: (result?: any) => void;
            syncAutoFill: (value?: any, isPrintine?: boolean) => void;
            changeTmpValue: (value: any) => void;
            addSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
            removeSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        syncOptions: import("lodash").DebouncedFunc<() => void>;
        setCanAccessSuperData: (value?: boolean) => void;
        deleteValueByName: (name: string) => void;
        getPersistData: () => void;
        setPersistData: import("lodash").DebouncedFunc<() => void>;
        clearPersistData: () => void;
        clear: (cb?: ((data: any) => void) | undefined) => void;
        onChildStoreDispose: (child: {
            id: string;
            path: string;
            storeType: string;
            disposed: boolean;
            parentId: string;
            childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            isFocused: boolean;
            type: string;
            unique: boolean;
            loading: boolean;
            required: boolean;
            tmpValue: any;
            rules: any;
            messages: any;
            errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
            name: string;
            itemId: string;
            unsetValueOnInvisible: boolean;
            itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            validated: boolean;
            validating: boolean;
            multiple: boolean;
            delimiter: string;
            valueField: string;
            labelField: string;
            joinValues: boolean;
            extractValue: boolean;
            options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
            expressionsInOptions: boolean;
            selectFirst: boolean;
            autoFill: any;
            clearValueOnHidden: boolean;
            selectedOptions: any;
            filteredOptions: any;
            dialogSchema: any;
            dialogOpen: boolean;
            dialogData: any;
            resetValue: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly parentStore: any;
            readonly __: any;
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly lastSelectValue: string;
            getSelectedOptions: (value?: any) => any[];
        } & {
            focus: () => void;
            blur: () => void;
            config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden }: {
                required?: boolean | undefined;
                unique?: boolean | undefined;
                value?: any;
                rules?: string | {
                    [propName: string]: any;
                } | undefined;
                messages?: {
                    [propName: string]: string;
                } | undefined;
                multiple?: boolean | undefined;
                delimiter?: string | undefined;
                valueField?: string | undefined;
                labelField?: string | undefined;
                joinValues?: boolean | undefined;
                extractValue?: boolean | undefined;
                type?: string | undefined;
                id?: string | undefined;
                selectFirst?: boolean | undefined;
                autoFill?: any;
                clearValueOnHidden?: boolean | undefined;
            }) => void;
            changeValue: (value: any, isPrintine?: boolean) => void;
            validate: (hook?: any) => Promise<boolean>;
            setError: (msg: string | string[], tag?: string) => void;
            addError: (msg: string | string[], tag?: string) => void;
            clearError: (tag?: string | undefined) => void;
            setOptions: (options: object[], onChange?: ((value: any) => void) | undefined) => void;
            loadOptions: (api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("../types").Payload | null>;
            deferLoadOptions: (option: any, api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined) => Promise<import("../types").Payload | null>;
            syncOptions: (originOptions?: any[] | undefined) => void;
            setLoading: (value: boolean) => void;
            setSubStore: (store: any) => void;
            getSubStore: () => any;
            reset: () => void;
            openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
            closeDialog: (result?: any) => void;
            syncAutoFill: (value?: any, isPrintine?: boolean) => void;
            changeTmpValue: (value: any) => void;
            addSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
            removeSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        } & {
            isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            tmpValue: import("mobx-state-tree").IType<any, any, any>;
            rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            name: import("mobx-state-tree").ISimpleType<string>;
            itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
            unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
            valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
            labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
            joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
            expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            autoFill: import("mobx-state-tree").IType<any, any, any>;
            clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogSchema: import("mobx-state-tree").IType<any, any, any>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IType<any, any, any>;
            resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        }, {
            readonly parentStore: any;
            readonly __: any;
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly lastSelectValue: string;
            getSelectedOptions: (value?: any) => any[];
        } & {
            focus: () => void;
            blur: () => void;
            config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden }: {
                required?: boolean | undefined;
                unique?: boolean | undefined;
                value?: any;
                rules?: string | {
                    [propName: string]: any;
                } | undefined;
                messages?: {
                    [propName: string]: string;
                } | undefined;
                multiple?: boolean | undefined;
                delimiter?: string | undefined;
                valueField?: string | undefined;
                labelField?: string | undefined;
                joinValues?: boolean | undefined;
                extractValue?: boolean | undefined;
                type?: string | undefined;
                id?: string | undefined;
                selectFirst?: boolean | undefined;
                autoFill?: any;
                clearValueOnHidden?: boolean | undefined;
            }) => void;
            changeValue: (value: any, isPrintine?: boolean) => void;
            validate: (hook?: any) => Promise<boolean>;
            setError: (msg: string | string[], tag?: string) => void;
            addError: (msg: string | string[], tag?: string) => void;
            clearError: (tag?: string | undefined) => void;
            setOptions: (options: object[], onChange?: ((value: any) => void) | undefined) => void;
            loadOptions: (api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("../types").Payload | null>;
            deferLoadOptions: (option: any, api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined) => Promise<import("../types").Payload | null>;
            syncOptions: (originOptions?: any[] | undefined) => void;
            setLoading: (value: boolean) => void;
            setSubStore: (store: any) => void;
            getSubStore: () => any;
            reset: () => void;
            openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
            closeDialog: (result?: any) => void;
            syncAutoFill: (value?: any, isPrintine?: boolean) => void;
            changeTmpValue: (value: any) => void;
            addSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
            removeSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        updateSavedData: () => void;
        handleRemoteError: (errors: {
            [propName: string]: string;
        }) => void;
        getItemsByPath: (key: string) => any[] | null;
        setRestError: (errors: string[]) => void;
        addRestError: (msg: string | string[]) => void;
        clearRestError: () => void;
        beforeDestroy(): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").ISimpleType<string>;
        path: import("mobx-state-tree").IType<string | undefined, string, string>;
        storeType: import("mobx-state-tree").ISimpleType<string>;
        disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
        childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
    } & {
        hasRemoteData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        data: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        initedAt: import("mobx-state-tree").IType<number | undefined, number, number>;
        updatedAt: import("mobx-state-tree").IType<number | undefined, number, number>;
        pristine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        action: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        dialogData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        drawerOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        drawerData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
    } & {
        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
        error: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        fetching: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        saving: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        busying: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        checking: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        initializing: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        schema: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        schemaKey: import("mobx-state-tree").IType<string | undefined, string, string>;
    } & {
        inited: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        submited: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        submiting: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        savedData: import("mobx-state-tree").IType<any, any, any>;
        itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        canAccessSuperData: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        persistData: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        restError: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
    }, {
        readonly parentStore: any;
        readonly __: any;
    } & {
        onChildStoreDispose(child: any): void;
        syncProps(props: any, prevProps: any, list?: string[]): void;
        dispose: (callback?: (() => void) | undefined) => void;
        addChildId: (id: string) => void;
        removeChildId: (id: string) => void;
    } & {
        initData(data?: object, skipSetPristine?: boolean): void;
        reset(): void;
        updateData(data?: object, tag?: object | undefined, replace?: boolean | undefined): void;
        setCurrentAction(action: object): void;
        openDialog(ctx: any, additonal?: object | undefined, callback?: ((ret: any) => void) | undefined): void;
        closeDialog(result?: any): void;
        openDrawer(ctx: any, additonal?: object | undefined, callback?: ((ret: any) => void) | undefined): void;
        closeDrawer(result?: any): void;
    } & {
        readonly loading: boolean;
    } & {
        markFetching: (fetching?: boolean) => void;
        markSaving: (saving?: boolean) => void;
        markBusying: (busying?: boolean) => void;
        fetchInitData: (api: import("../types").Api, data?: object | undefined, options?: import("../types").fetchOptions | undefined) => Promise<any>;
        fetchData: (api: import("../types").Api, data?: object | undefined, options?: import("../types").fetchOptions | undefined) => Promise<any>;
        fetchWSData: (ws: string, afterDataFetch: (data: any) => any) => void;
        reInitData: (data: object | undefined, replace?: boolean) => void;
        updateMessage: (msg?: string | undefined, error?: boolean) => void;
        clearMessage: () => void;
        setHasRemoteData: () => void;
        saveRemote: (api: import("../types").Api, data?: object | undefined, options?: import("../types").fetchOptions | undefined) => Promise<any>;
        fetchSchema: (api: import("../types").Api, data?: object | undefined, options?: import("../types").fetchOptions | undefined) => Promise<any>;
        checkRemote: (api: import("../types").Api, data?: object | undefined, options?: import("../types").fetchOptions | undefined) => Promise<any>;
    } & {
        readonly loading: boolean;
        readonly items: ({
            id: string;
            path: string;
            storeType: string;
            disposed: boolean;
            parentId: string;
            childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            isFocused: boolean;
            type: string;
            unique: boolean;
            loading: boolean;
            required: boolean;
            tmpValue: any;
            rules: any;
            messages: any;
            errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
            name: string;
            itemId: string;
            unsetValueOnInvisible: boolean;
            itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            validated: boolean;
            validating: boolean;
            multiple: boolean;
            delimiter: string;
            valueField: string;
            labelField: string;
            joinValues: boolean;
            extractValue: boolean;
            options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
            expressionsInOptions: boolean;
            selectFirst: boolean;
            autoFill: any;
            clearValueOnHidden: boolean;
            selectedOptions: any;
            filteredOptions: any;
            dialogSchema: any;
            dialogOpen: boolean;
            dialogData: any;
            resetValue: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly parentStore: any;
            readonly __: any;
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly lastSelectValue: string;
            getSelectedOptions: (value?: any) => any[];
        } & {
            focus: () => void;
            blur: () => void;
            config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden }: {
                required?: boolean | undefined;
                unique?: boolean | undefined;
                value?: any;
                rules?: string | {
                    [propName: string]: any;
                } | undefined;
                messages?: {
                    [propName: string]: string;
                } | undefined;
                multiple?: boolean | undefined;
                delimiter?: string | undefined;
                valueField?: string | undefined;
                labelField?: string | undefined;
                joinValues?: boolean | undefined;
                extractValue?: boolean | undefined;
                type?: string | undefined;
                id?: string | undefined;
                selectFirst?: boolean | undefined;
                autoFill?: any;
                clearValueOnHidden?: boolean | undefined;
            }) => void;
            changeValue: (value: any, isPrintine?: boolean) => void;
            validate: (hook?: any) => Promise<boolean>;
            setError: (msg: string | string[], tag?: string) => void;
            addError: (msg: string | string[], tag?: string) => void;
            clearError: (tag?: string | undefined) => void;
            setOptions: (options: object[], onChange?: ((value: any) => void) | undefined) => void;
            loadOptions: (api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("../types").Payload | null>;
            deferLoadOptions: (option: any, api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined) => Promise<import("../types").Payload | null>;
            syncOptions: (originOptions?: any[] | undefined) => void;
            setLoading: (value: boolean) => void;
            setSubStore: (store: any) => void;
            getSubStore: () => any;
            reset: () => void;
            openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
            closeDialog: (result?: any) => void;
            syncAutoFill: (value?: any, isPrintine?: boolean) => void;
            changeTmpValue: (value: any) => void;
            addSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
            removeSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        } & {
            isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            tmpValue: import("mobx-state-tree").IType<any, any, any>;
            rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            name: import("mobx-state-tree").ISimpleType<string>;
            itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
            unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
            valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
            labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
            joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
            expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            autoFill: import("mobx-state-tree").IType<any, any, any>;
            clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogSchema: import("mobx-state-tree").IType<any, any, any>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IType<any, any, any>;
            resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        }, {
            readonly parentStore: any;
            readonly __: any;
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly lastSelectValue: string;
            getSelectedOptions: (value?: any) => any[];
        } & {
            focus: () => void;
            blur: () => void;
            config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden }: {
                required?: boolean | undefined;
                unique?: boolean | undefined;
                value?: any;
                rules?: string | {
                    [propName: string]: any;
                } | undefined;
                messages?: {
                    [propName: string]: string;
                } | undefined;
                multiple?: boolean | undefined;
                delimiter?: string | undefined;
                valueField?: string | undefined;
                labelField?: string | undefined;
                joinValues?: boolean | undefined;
                extractValue?: boolean | undefined;
                type?: string | undefined;
                id?: string | undefined;
                selectFirst?: boolean | undefined;
                autoFill?: any;
                clearValueOnHidden?: boolean | undefined;
            }) => void;
            changeValue: (value: any, isPrintine?: boolean) => void;
            validate: (hook?: any) => Promise<boolean>;
            setError: (msg: string | string[], tag?: string) => void;
            addError: (msg: string | string[], tag?: string) => void;
            clearError: (tag?: string | undefined) => void;
            setOptions: (options: object[], onChange?: ((value: any) => void) | undefined) => void;
            loadOptions: (api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("../types").Payload | null>;
            deferLoadOptions: (option: any, api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined) => Promise<import("../types").Payload | null>;
            syncOptions: (originOptions?: any[] | undefined) => void;
            setLoading: (value: boolean) => void;
            setSubStore: (store: any) => void;
            getSubStore: () => any;
            reset: () => void;
            openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
            closeDialog: (result?: any) => void;
            syncAutoFill: (value?: any, isPrintine?: boolean) => void;
            changeTmpValue: (value: any) => void;
            addSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
            removeSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
        readonly errors: {
            [propName: string]: string[];
        };
        getValueByName(name: string): any;
        getPristineValueByName(name: string): any;
        getItemById(id: string): ({
            id: string;
            path: string;
            storeType: string;
            disposed: boolean;
            parentId: string;
            childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            isFocused: boolean;
            type: string;
            unique: boolean;
            loading: boolean;
            required: boolean;
            tmpValue: any;
            rules: any;
            messages: any;
            errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
            name: string;
            itemId: string;
            unsetValueOnInvisible: boolean;
            itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            validated: boolean;
            validating: boolean;
            multiple: boolean;
            delimiter: string;
            valueField: string;
            labelField: string;
            joinValues: boolean;
            extractValue: boolean;
            options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
            expressionsInOptions: boolean;
            selectFirst: boolean;
            autoFill: any;
            clearValueOnHidden: boolean;
            selectedOptions: any;
            filteredOptions: any;
            dialogSchema: any;
            dialogOpen: boolean;
            dialogData: any;
            resetValue: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly parentStore: any;
            readonly __: any;
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly lastSelectValue: string;
            getSelectedOptions: (value?: any) => any[];
        } & {
            focus: () => void;
            blur: () => void;
            config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden }: {
                required?: boolean | undefined;
                unique?: boolean | undefined;
                value?: any;
                rules?: string | {
                    [propName: string]: any;
                } | undefined;
                messages?: {
                    [propName: string]: string;
                } | undefined;
                multiple?: boolean | undefined;
                delimiter?: string | undefined;
                valueField?: string | undefined;
                labelField?: string | undefined;
                joinValues?: boolean | undefined;
                extractValue?: boolean | undefined;
                type?: string | undefined;
                id?: string | undefined;
                selectFirst?: boolean | undefined;
                autoFill?: any;
                clearValueOnHidden?: boolean | undefined;
            }) => void;
            changeValue: (value: any, isPrintine?: boolean) => void;
            validate: (hook?: any) => Promise<boolean>;
            setError: (msg: string | string[], tag?: string) => void;
            addError: (msg: string | string[], tag?: string) => void;
            clearError: (tag?: string | undefined) => void;
            setOptions: (options: object[], onChange?: ((value: any) => void) | undefined) => void;
            loadOptions: (api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("../types").Payload | null>;
            deferLoadOptions: (option: any, api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined) => Promise<import("../types").Payload | null>;
            syncOptions: (originOptions?: any[] | undefined) => void;
            setLoading: (value: boolean) => void;
            setSubStore: (store: any) => void;
            getSubStore: () => any;
            reset: () => void;
            openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
            closeDialog: (result?: any) => void;
            syncAutoFill: (value?: any, isPrintine?: boolean) => void;
            changeTmpValue: (value: any) => void;
            addSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
            removeSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        } & {
            isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            tmpValue: import("mobx-state-tree").IType<any, any, any>;
            rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            name: import("mobx-state-tree").ISimpleType<string>;
            itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
            unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
            valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
            labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
            joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
            expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            autoFill: import("mobx-state-tree").IType<any, any, any>;
            clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogSchema: import("mobx-state-tree").IType<any, any, any>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IType<any, any, any>;
            resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        }, {
            readonly parentStore: any;
            readonly __: any;
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly lastSelectValue: string;
            getSelectedOptions: (value?: any) => any[];
        } & {
            focus: () => void;
            blur: () => void;
            config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden }: {
                required?: boolean | undefined;
                unique?: boolean | undefined;
                value?: any;
                rules?: string | {
                    [propName: string]: any;
                } | undefined;
                messages?: {
                    [propName: string]: string;
                } | undefined;
                multiple?: boolean | undefined;
                delimiter?: string | undefined;
                valueField?: string | undefined;
                labelField?: string | undefined;
                joinValues?: boolean | undefined;
                extractValue?: boolean | undefined;
                type?: string | undefined;
                id?: string | undefined;
                selectFirst?: boolean | undefined;
                autoFill?: any;
                clearValueOnHidden?: boolean | undefined;
            }) => void;
            changeValue: (value: any, isPrintine?: boolean) => void;
            validate: (hook?: any) => Promise<boolean>;
            setError: (msg: string | string[], tag?: string) => void;
            addError: (msg: string | string[], tag?: string) => void;
            clearError: (tag?: string | undefined) => void;
            setOptions: (options: object[], onChange?: ((value: any) => void) | undefined) => void;
            loadOptions: (api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("../types").Payload | null>;
            deferLoadOptions: (option: any, api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined) => Promise<import("../types").Payload | null>;
            syncOptions: (originOptions?: any[] | undefined) => void;
            setLoading: (value: boolean) => void;
            setSubStore: (store: any) => void;
            getSubStore: () => any;
            reset: () => void;
            openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
            closeDialog: (result?: any) => void;
            syncAutoFill: (value?: any, isPrintine?: boolean) => void;
            changeTmpValue: (value: any) => void;
            addSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
            removeSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined; /**
         * name 值有两种类型：
         * 1. 数字索引，出现在多条模式下，这个时候，需要返回当前索引下的form，并且用于下一层的遍历搜索
         * 2. 普通的表单项 name 值，出现在单条模式下，当前这层查找已经结束，所以要返回当前找到的items，而不能返回form
         *
         * @param name 查找的name
         */
        getItemByName(name: string): ({
            id: string;
            path: string;
            storeType: string;
            disposed: boolean;
            parentId: string;
            childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            isFocused: boolean;
            type: string;
            unique: boolean;
            loading: boolean;
            required: boolean;
            tmpValue: any;
            rules: any;
            messages: any;
            errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
            name: string;
            itemId: string;
            unsetValueOnInvisible: boolean;
            itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            validated: boolean;
            validating: boolean;
            multiple: boolean;
            delimiter: string;
            valueField: string;
            labelField: string;
            joinValues: boolean;
            extractValue: boolean;
            options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
            expressionsInOptions: boolean;
            selectFirst: boolean;
            autoFill: any;
            clearValueOnHidden: boolean;
            selectedOptions: any;
            filteredOptions: any;
            dialogSchema: any;
            dialogOpen: boolean;
            dialogData: any;
            resetValue: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly parentStore: any;
            readonly __: any;
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly lastSelectValue: string;
            getSelectedOptions: (value?: any) => any[];
        } & {
            focus: () => void;
            blur: () => void;
            config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden }: {
                required?: boolean | undefined;
                unique?: boolean | undefined;
                value?: any;
                rules?: string | {
                    [propName: string]: any;
                } | undefined;
                messages?: {
                    [propName: string]: string;
                } | undefined;
                multiple?: boolean | undefined;
                delimiter?: string | undefined;
                valueField?: string | undefined;
                labelField?: string | undefined;
                joinValues?: boolean | undefined;
                extractValue?: boolean | undefined;
                type?: string | undefined;
                id?: string | undefined;
                selectFirst?: boolean | undefined;
                autoFill?: any;
                clearValueOnHidden?: boolean | undefined;
            }) => void;
            changeValue: (value: any, isPrintine?: boolean) => void;
            validate: (hook?: any) => Promise<boolean>;
            setError: (msg: string | string[], tag?: string) => void;
            addError: (msg: string | string[], tag?: string) => void;
            clearError: (tag?: string | undefined) => void;
            setOptions: (options: object[], onChange?: ((value: any) => void) | undefined) => void;
            loadOptions: (api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("../types").Payload | null>;
            deferLoadOptions: (option: any, api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined) => Promise<import("../types").Payload | null>;
            syncOptions: (originOptions?: any[] | undefined) => void;
            setLoading: (value: boolean) => void;
            setSubStore: (store: any) => void;
            getSubStore: () => any;
            reset: () => void;
            openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
            closeDialog: (result?: any) => void;
            syncAutoFill: (value?: any, isPrintine?: boolean) => void;
            changeTmpValue: (value: any) => void;
            addSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
            removeSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        } & {
            isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            tmpValue: import("mobx-state-tree").IType<any, any, any>;
            rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            name: import("mobx-state-tree").ISimpleType<string>;
            itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
            unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
            valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
            labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
            joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
            expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            autoFill: import("mobx-state-tree").IType<any, any, any>;
            clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogSchema: import("mobx-state-tree").IType<any, any, any>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IType<any, any, any>;
            resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        }, {
            readonly parentStore: any;
            readonly __: any;
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly lastSelectValue: string;
            getSelectedOptions: (value?: any) => any[];
        } & {
            focus: () => void;
            blur: () => void;
            config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden }: {
                required?: boolean | undefined;
                unique?: boolean | undefined;
                value?: any;
                rules?: string | {
                    [propName: string]: any;
                } | undefined;
                messages?: {
                    [propName: string]: string;
                } | undefined;
                multiple?: boolean | undefined;
                delimiter?: string | undefined;
                valueField?: string | undefined;
                labelField?: string | undefined;
                joinValues?: boolean | undefined;
                extractValue?: boolean | undefined;
                type?: string | undefined;
                id?: string | undefined;
                selectFirst?: boolean | undefined;
                autoFill?: any;
                clearValueOnHidden?: boolean | undefined;
            }) => void;
            changeValue: (value: any, isPrintine?: boolean) => void;
            validate: (hook?: any) => Promise<boolean>;
            setError: (msg: string | string[], tag?: string) => void;
            addError: (msg: string | string[], tag?: string) => void;
            clearError: (tag?: string | undefined) => void;
            setOptions: (options: object[], onChange?: ((value: any) => void) | undefined) => void;
            loadOptions: (api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("../types").Payload | null>;
            deferLoadOptions: (option: any, api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined) => Promise<import("../types").Payload | null>;
            syncOptions: (originOptions?: any[] | undefined) => void;
            setLoading: (value: boolean) => void;
            setSubStore: (store: any) => void;
            getSubStore: () => any;
            reset: () => void;
            openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
            closeDialog: (result?: any) => void;
            syncAutoFill: (value?: any, isPrintine?: boolean) => void;
            changeTmpValue: (value: any) => void;
            addSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
            removeSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined;
        getItemsByName(name: string): ({
            id: string;
            path: string;
            storeType: string;
            disposed: boolean;
            parentId: string;
            childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            isFocused: boolean;
            type: string;
            unique: boolean;
            loading: boolean;
            required: boolean;
            tmpValue: any;
            rules: any;
            messages: any;
            errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
            name: string;
            itemId: string;
            unsetValueOnInvisible: boolean;
            itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            validated: boolean;
            validating: boolean;
            multiple: boolean;
            delimiter: string;
            valueField: string;
            labelField: string;
            joinValues: boolean;
            extractValue: boolean;
            options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
            expressionsInOptions: boolean;
            selectFirst: boolean;
            autoFill: any;
            clearValueOnHidden: boolean;
            selectedOptions: any;
            filteredOptions: any;
            dialogSchema: any;
            dialogOpen: boolean;
            dialogData: any;
            resetValue: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly parentStore: any;
            readonly __: any;
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly lastSelectValue: string;
            getSelectedOptions: (value?: any) => any[];
        } & {
            focus: () => void;
            blur: () => void;
            config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden }: {
                required?: boolean | undefined;
                unique?: boolean | undefined;
                value?: any;
                rules?: string | {
                    [propName: string]: any;
                } | undefined;
                messages?: {
                    [propName: string]: string;
                } | undefined;
                multiple?: boolean | undefined;
                delimiter?: string | undefined;
                valueField?: string | undefined;
                labelField?: string | undefined;
                joinValues?: boolean | undefined;
                extractValue?: boolean | undefined;
                type?: string | undefined;
                id?: string | undefined;
                selectFirst?: boolean | undefined;
                autoFill?: any;
                clearValueOnHidden?: boolean | undefined;
            }) => void;
            changeValue: (value: any, isPrintine?: boolean) => void;
            validate: (hook?: any) => Promise<boolean>;
            setError: (msg: string | string[], tag?: string) => void;
            addError: (msg: string | string[], tag?: string) => void;
            clearError: (tag?: string | undefined) => void;
            setOptions: (options: object[], onChange?: ((value: any) => void) | undefined) => void;
            loadOptions: (api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("../types").Payload | null>;
            deferLoadOptions: (option: any, api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined) => Promise<import("../types").Payload | null>;
            syncOptions: (originOptions?: any[] | undefined) => void;
            setLoading: (value: boolean) => void;
            setSubStore: (store: any) => void;
            getSubStore: () => any;
            reset: () => void;
            openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
            closeDialog: (result?: any) => void;
            syncAutoFill: (value?: any, isPrintine?: boolean) => void;
            changeTmpValue: (value: any) => void;
            addSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
            removeSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        } & {
            isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            tmpValue: import("mobx-state-tree").IType<any, any, any>;
            rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            name: import("mobx-state-tree").ISimpleType<string>;
            itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
            unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
            valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
            labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
            joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
            expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            autoFill: import("mobx-state-tree").IType<any, any, any>;
            clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogSchema: import("mobx-state-tree").IType<any, any, any>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IType<any, any, any>;
            resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        }, {
            readonly parentStore: any;
            readonly __: any;
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly lastSelectValue: string;
            getSelectedOptions: (value?: any) => any[];
        } & {
            focus: () => void;
            blur: () => void;
            config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden }: {
                required?: boolean | undefined;
                unique?: boolean | undefined;
                value?: any;
                rules?: string | {
                    [propName: string]: any;
                } | undefined;
                messages?: {
                    [propName: string]: string;
                } | undefined;
                multiple?: boolean | undefined;
                delimiter?: string | undefined;
                valueField?: string | undefined;
                labelField?: string | undefined;
                joinValues?: boolean | undefined;
                extractValue?: boolean | undefined;
                type?: string | undefined;
                id?: string | undefined;
                selectFirst?: boolean | undefined;
                autoFill?: any;
                clearValueOnHidden?: boolean | undefined;
            }) => void;
            changeValue: (value: any, isPrintine?: boolean) => void;
            validate: (hook?: any) => Promise<boolean>;
            setError: (msg: string | string[], tag?: string) => void;
            addError: (msg: string | string[], tag?: string) => void;
            clearError: (tag?: string | undefined) => void;
            setOptions: (options: object[], onChange?: ((value: any) => void) | undefined) => void;
            loadOptions: (api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("../types").Payload | null>;
            deferLoadOptions: (option: any, api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined) => Promise<import("../types").Payload | null>;
            syncOptions: (originOptions?: any[] | undefined) => void;
            setLoading: (value: boolean) => void;
            setSubStore: (store: any) => void;
            getSubStore: () => any;
            reset: () => void;
            openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
            closeDialog: (result?: any) => void;
            syncAutoFill: (value?: any, isPrintine?: boolean) => void;
            changeTmpValue: (value: any) => void;
            addSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
            removeSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
        readonly valid: boolean;
        readonly isPristine: boolean;
        readonly modified: boolean;
    } & {
        setInited: (value: boolean) => void;
        setValues: (values: object, tag?: object | undefined, replace?: boolean | undefined) => void;
        setValueByName: (name: string, value: any, isPristine?: boolean, force?: boolean) => void;
        trimValues: () => void;
        submit: (fn?: ((values: object) => Promise<any>) | undefined, hooks?: (() => Promise<any>)[] | undefined, failedMessage?: string | undefined) => Promise<any>;
        validate: (hooks?: (() => Promise<any>)[] | undefined, forceValidate?: boolean | undefined) => Promise<boolean>;
        validateFields: (fields: string[]) => Promise<boolean>;
        clearErrors: () => void;
        saveRemote: (api: import("../types").Api, data?: object | undefined, options?: import("../types").fetchOptions | undefined) => Promise<any>;
        reset: (cb?: ((data: any) => void) | undefined, resetData?: boolean) => void;
        addFormItem: (item: {
            id: string;
            path: string;
            storeType: string;
            disposed: boolean;
            parentId: string;
            childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            isFocused: boolean;
            type: string;
            unique: boolean;
            loading: boolean;
            required: boolean;
            tmpValue: any;
            rules: any;
            messages: any;
            errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
            name: string;
            itemId: string;
            unsetValueOnInvisible: boolean;
            itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            validated: boolean;
            validating: boolean;
            multiple: boolean;
            delimiter: string;
            valueField: string;
            labelField: string;
            joinValues: boolean;
            extractValue: boolean;
            options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
            expressionsInOptions: boolean;
            selectFirst: boolean;
            autoFill: any;
            clearValueOnHidden: boolean;
            selectedOptions: any;
            filteredOptions: any;
            dialogSchema: any;
            dialogOpen: boolean;
            dialogData: any;
            resetValue: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly parentStore: any;
            readonly __: any;
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly lastSelectValue: string;
            getSelectedOptions: (value?: any) => any[];
        } & {
            focus: () => void;
            blur: () => void;
            config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden }: {
                required?: boolean | undefined;
                unique?: boolean | undefined;
                value?: any;
                rules?: string | {
                    [propName: string]: any;
                } | undefined;
                messages?: {
                    [propName: string]: string;
                } | undefined;
                multiple?: boolean | undefined;
                delimiter?: string | undefined;
                valueField?: string | undefined;
                labelField?: string | undefined;
                joinValues?: boolean | undefined;
                extractValue?: boolean | undefined;
                type?: string | undefined;
                id?: string | undefined;
                selectFirst?: boolean | undefined;
                autoFill?: any;
                clearValueOnHidden?: boolean | undefined;
            }) => void;
            changeValue: (value: any, isPrintine?: boolean) => void;
            validate: (hook?: any) => Promise<boolean>;
            setError: (msg: string | string[], tag?: string) => void;
            addError: (msg: string | string[], tag?: string) => void;
            clearError: (tag?: string | undefined) => void;
            setOptions: (options: object[], onChange?: ((value: any) => void) | undefined) => void;
            loadOptions: (api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("../types").Payload | null>;
            deferLoadOptions: (option: any, api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined) => Promise<import("../types").Payload | null>;
            syncOptions: (originOptions?: any[] | undefined) => void;
            setLoading: (value: boolean) => void;
            setSubStore: (store: any) => void;
            getSubStore: () => any;
            reset: () => void;
            openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
            closeDialog: (result?: any) => void;
            syncAutoFill: (value?: any, isPrintine?: boolean) => void;
            changeTmpValue: (value: any) => void;
            addSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
            removeSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        } & {
            isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            tmpValue: import("mobx-state-tree").IType<any, any, any>;
            rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            name: import("mobx-state-tree").ISimpleType<string>;
            itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
            unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
            valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
            labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
            joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
            expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            autoFill: import("mobx-state-tree").IType<any, any, any>;
            clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogSchema: import("mobx-state-tree").IType<any, any, any>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IType<any, any, any>;
            resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        }, {
            readonly parentStore: any;
            readonly __: any;
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly lastSelectValue: string;
            getSelectedOptions: (value?: any) => any[];
        } & {
            focus: () => void;
            blur: () => void;
            config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden }: {
                required?: boolean | undefined;
                unique?: boolean | undefined;
                value?: any;
                rules?: string | {
                    [propName: string]: any;
                } | undefined;
                messages?: {
                    [propName: string]: string;
                } | undefined;
                multiple?: boolean | undefined;
                delimiter?: string | undefined;
                valueField?: string | undefined;
                labelField?: string | undefined;
                joinValues?: boolean | undefined;
                extractValue?: boolean | undefined;
                type?: string | undefined;
                id?: string | undefined;
                selectFirst?: boolean | undefined;
                autoFill?: any;
                clearValueOnHidden?: boolean | undefined;
            }) => void;
            changeValue: (value: any, isPrintine?: boolean) => void;
            validate: (hook?: any) => Promise<boolean>;
            setError: (msg: string | string[], tag?: string) => void;
            addError: (msg: string | string[], tag?: string) => void;
            clearError: (tag?: string | undefined) => void;
            setOptions: (options: object[], onChange?: ((value: any) => void) | undefined) => void;
            loadOptions: (api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("../types").Payload | null>;
            deferLoadOptions: (option: any, api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined) => Promise<import("../types").Payload | null>;
            syncOptions: (originOptions?: any[] | undefined) => void;
            setLoading: (value: boolean) => void;
            setSubStore: (store: any) => void;
            getSubStore: () => any;
            reset: () => void;
            openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
            closeDialog: (result?: any) => void;
            syncAutoFill: (value?: any, isPrintine?: boolean) => void;
            changeTmpValue: (value: any) => void;
            addSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
            removeSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        removeFormItem: (item: {
            id: string;
            path: string;
            storeType: string;
            disposed: boolean;
            parentId: string;
            childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            isFocused: boolean;
            type: string;
            unique: boolean;
            loading: boolean;
            required: boolean;
            tmpValue: any;
            rules: any;
            messages: any;
            errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
            name: string;
            itemId: string;
            unsetValueOnInvisible: boolean;
            itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            validated: boolean;
            validating: boolean;
            multiple: boolean;
            delimiter: string;
            valueField: string;
            labelField: string;
            joinValues: boolean;
            extractValue: boolean;
            options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
            expressionsInOptions: boolean;
            selectFirst: boolean;
            autoFill: any;
            clearValueOnHidden: boolean;
            selectedOptions: any;
            filteredOptions: any;
            dialogSchema: any;
            dialogOpen: boolean;
            dialogData: any;
            resetValue: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly parentStore: any;
            readonly __: any;
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly lastSelectValue: string;
            getSelectedOptions: (value?: any) => any[];
        } & {
            focus: () => void;
            blur: () => void;
            config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden }: {
                required?: boolean | undefined;
                unique?: boolean | undefined;
                value?: any;
                rules?: string | {
                    [propName: string]: any;
                } | undefined;
                messages?: {
                    [propName: string]: string;
                } | undefined;
                multiple?: boolean | undefined;
                delimiter?: string | undefined;
                valueField?: string | undefined;
                labelField?: string | undefined;
                joinValues?: boolean | undefined;
                extractValue?: boolean | undefined;
                type?: string | undefined;
                id?: string | undefined;
                selectFirst?: boolean | undefined;
                autoFill?: any;
                clearValueOnHidden?: boolean | undefined;
            }) => void;
            changeValue: (value: any, isPrintine?: boolean) => void;
            validate: (hook?: any) => Promise<boolean>;
            setError: (msg: string | string[], tag?: string) => void;
            addError: (msg: string | string[], tag?: string) => void;
            clearError: (tag?: string | undefined) => void;
            setOptions: (options: object[], onChange?: ((value: any) => void) | undefined) => void;
            loadOptions: (api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("../types").Payload | null>;
            deferLoadOptions: (option: any, api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined) => Promise<import("../types").Payload | null>;
            syncOptions: (originOptions?: any[] | undefined) => void;
            setLoading: (value: boolean) => void;
            setSubStore: (store: any) => void;
            getSubStore: () => any;
            reset: () => void;
            openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
            closeDialog: (result?: any) => void;
            syncAutoFill: (value?: any, isPrintine?: boolean) => void;
            changeTmpValue: (value: any) => void;
            addSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
            removeSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        } & {
            isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            tmpValue: import("mobx-state-tree").IType<any, any, any>;
            rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            name: import("mobx-state-tree").ISimpleType<string>;
            itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
            unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
            valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
            labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
            joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
            expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            autoFill: import("mobx-state-tree").IType<any, any, any>;
            clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogSchema: import("mobx-state-tree").IType<any, any, any>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IType<any, any, any>;
            resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        }, {
            readonly parentStore: any;
            readonly __: any;
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly lastSelectValue: string;
            getSelectedOptions: (value?: any) => any[];
        } & {
            focus: () => void;
            blur: () => void;
            config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden }: {
                required?: boolean | undefined;
                unique?: boolean | undefined;
                value?: any;
                rules?: string | {
                    [propName: string]: any;
                } | undefined;
                messages?: {
                    [propName: string]: string;
                } | undefined;
                multiple?: boolean | undefined;
                delimiter?: string | undefined;
                valueField?: string | undefined;
                labelField?: string | undefined;
                joinValues?: boolean | undefined;
                extractValue?: boolean | undefined;
                type?: string | undefined;
                id?: string | undefined;
                selectFirst?: boolean | undefined;
                autoFill?: any;
                clearValueOnHidden?: boolean | undefined;
            }) => void;
            changeValue: (value: any, isPrintine?: boolean) => void;
            validate: (hook?: any) => Promise<boolean>;
            setError: (msg: string | string[], tag?: string) => void;
            addError: (msg: string | string[], tag?: string) => void;
            clearError: (tag?: string | undefined) => void;
            setOptions: (options: object[], onChange?: ((value: any) => void) | undefined) => void;
            loadOptions: (api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("../types").Payload | null>;
            deferLoadOptions: (option: any, api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined) => Promise<import("../types").Payload | null>;
            syncOptions: (originOptions?: any[] | undefined) => void;
            setLoading: (value: boolean) => void;
            setSubStore: (store: any) => void;
            getSubStore: () => any;
            reset: () => void;
            openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
            closeDialog: (result?: any) => void;
            syncAutoFill: (value?: any, isPrintine?: boolean) => void;
            changeTmpValue: (value: any) => void;
            addSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
            removeSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        syncOptions: import("lodash").DebouncedFunc<() => void>;
        setCanAccessSuperData: (value?: boolean) => void;
        deleteValueByName: (name: string) => void;
        getPersistData: () => void;
        setPersistData: import("lodash").DebouncedFunc<() => void>;
        clearPersistData: () => void;
        clear: (cb?: ((data: any) => void) | undefined) => void;
        onChildStoreDispose: (child: {
            id: string;
            path: string;
            storeType: string;
            disposed: boolean;
            parentId: string;
            childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            isFocused: boolean;
            type: string;
            unique: boolean;
            loading: boolean;
            required: boolean;
            tmpValue: any;
            rules: any;
            messages: any;
            errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
            name: string;
            itemId: string;
            unsetValueOnInvisible: boolean;
            itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            validated: boolean;
            validating: boolean;
            multiple: boolean;
            delimiter: string;
            valueField: string;
            labelField: string;
            joinValues: boolean;
            extractValue: boolean;
            options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
            expressionsInOptions: boolean;
            selectFirst: boolean;
            autoFill: any;
            clearValueOnHidden: boolean;
            selectedOptions: any;
            filteredOptions: any;
            dialogSchema: any;
            dialogOpen: boolean;
            dialogData: any;
            resetValue: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly parentStore: any;
            readonly __: any;
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly lastSelectValue: string;
            getSelectedOptions: (value?: any) => any[];
        } & {
            focus: () => void;
            blur: () => void;
            config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden }: {
                required?: boolean | undefined;
                unique?: boolean | undefined;
                value?: any;
                rules?: string | {
                    [propName: string]: any;
                } | undefined;
                messages?: {
                    [propName: string]: string;
                } | undefined;
                multiple?: boolean | undefined;
                delimiter?: string | undefined;
                valueField?: string | undefined;
                labelField?: string | undefined;
                joinValues?: boolean | undefined;
                extractValue?: boolean | undefined;
                type?: string | undefined;
                id?: string | undefined;
                selectFirst?: boolean | undefined;
                autoFill?: any;
                clearValueOnHidden?: boolean | undefined;
            }) => void;
            changeValue: (value: any, isPrintine?: boolean) => void;
            validate: (hook?: any) => Promise<boolean>;
            setError: (msg: string | string[], tag?: string) => void;
            addError: (msg: string | string[], tag?: string) => void;
            clearError: (tag?: string | undefined) => void;
            setOptions: (options: object[], onChange?: ((value: any) => void) | undefined) => void;
            loadOptions: (api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("../types").Payload | null>;
            deferLoadOptions: (option: any, api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined) => Promise<import("../types").Payload | null>;
            syncOptions: (originOptions?: any[] | undefined) => void;
            setLoading: (value: boolean) => void;
            setSubStore: (store: any) => void;
            getSubStore: () => any;
            reset: () => void;
            openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
            closeDialog: (result?: any) => void;
            syncAutoFill: (value?: any, isPrintine?: boolean) => void;
            changeTmpValue: (value: any) => void;
            addSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
            removeSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        } & {
            isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            tmpValue: import("mobx-state-tree").IType<any, any, any>;
            rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                tag: import("mobx-state-tree").IType<string | undefined, string, string>;
            }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
            name: import("mobx-state-tree").ISimpleType<string>;
            itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
            unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
            valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
            labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
            joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
            expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            autoFill: import("mobx-state-tree").IType<any, any, any>;
            clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogSchema: import("mobx-state-tree").IType<any, any, any>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IType<any, any, any>;
            resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        }, {
            readonly parentStore: any;
            readonly __: any;
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            readonly subFormItems: any;
            readonly form: any;
            readonly value: any;
            readonly prinstine: any;
            readonly errors: string[];
            readonly valid: boolean;
            readonly lastSelectValue: string;
            getSelectedOptions: (value?: any) => any[];
        } & {
            focus: () => void;
            blur: () => void;
            config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden }: {
                required?: boolean | undefined;
                unique?: boolean | undefined;
                value?: any;
                rules?: string | {
                    [propName: string]: any;
                } | undefined;
                messages?: {
                    [propName: string]: string;
                } | undefined;
                multiple?: boolean | undefined;
                delimiter?: string | undefined;
                valueField?: string | undefined;
                labelField?: string | undefined;
                joinValues?: boolean | undefined;
                extractValue?: boolean | undefined;
                type?: string | undefined;
                id?: string | undefined;
                selectFirst?: boolean | undefined;
                autoFill?: any;
                clearValueOnHidden?: boolean | undefined;
            }) => void;
            changeValue: (value: any, isPrintine?: boolean) => void;
            validate: (hook?: any) => Promise<boolean>;
            setError: (msg: string | string[], tag?: string) => void;
            addError: (msg: string | string[], tag?: string) => void;
            clearError: (tag?: string | undefined) => void;
            setOptions: (options: object[], onChange?: ((value: any) => void) | undefined) => void;
            loadOptions: (api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("../types").Payload | null>;
            deferLoadOptions: (option: any, api: import("../types").Api, data?: object | undefined, config?: import("../types").fetchOptions | undefined) => Promise<import("../types").Payload | null>;
            syncOptions: (originOptions?: any[] | undefined) => void;
            setLoading: (value: boolean) => void;
            setSubStore: (store: any) => void;
            getSubStore: () => any;
            reset: () => void;
            openDialog: (schema: any, data?: any, callback?: ((ret?: any) => void) | undefined) => void;
            closeDialog: (result?: any) => void;
            syncAutoFill: (value?: any, isPrintine?: boolean) => void;
            changeTmpValue: (value: any) => void;
            addSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
            removeSubFormItem: (item: {
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<any, any, any>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            }, {
                readonly parentStore: any;
                readonly __: any;
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any) => any[];
            } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
        updateSavedData: () => void;
        handleRemoteError: (errors: {
            [propName: string]: string;
        }) => void;
        getItemsByPath: (key: string) => any[] | null;
        setRestError: (errors: string[]) => void;
        addRestError: (msg: string | string[]) => void;
        clearRestError: () => void;
        beforeDestroy(): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
    readonly addable: boolean;
    readonly removable: boolean;
    /**
     * name 值有两种类型：
     * 1. 数字索引，出现在多条模式下，这个时候，需要返回当前索引下的form，并且用于下一层的遍历搜索
     * 2. 普通的表单项 name 值，出现在单条模式下，当前这层查找已经结束，所以要返回当前找到的items，而不能返回form
     *
     * @param name 查找的name
     */
    getItemsByName(name: string): any;
} & {
    config: (setting: {
        multiple?: boolean;
        minLength?: number;
        maxLength?: number;
        length?: number;
    }) => void;
    setActiveKey: (key: number) => void;
    bindUniuqueItem: (item: IFormItemStore) => void;
    unBindUniuqueItem: (item: IFormItemStore) => void;
    addForm: (form: IFormStore) => void;
    onChildStoreDispose: (child: IFormStore) => void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export declare type IComboStore = Instance<typeof ComboStore>;
export declare type SComboStore = SnapshotIn<typeof ComboStore>;
