{
    "version": 3,
    "file": "root.js",
    "sourceRoot": "",
    "sources": [
        "/src/store/root.ts"
    ],
    "names": [],
    "mappings": ";;;;AAAA,mDAAgD;AAChD,kDAAoB;AACpB,0CAA6C;AAC7C,qCAAuC;AAE1B,QAAA,SAAS,GAAG,sBAAY,CAAC,KAAK,CAAC,WAAW,CAAC;KACrD,KAAK,CAAC;IACL,YAAY,EAAE,uBAAK,CAAC,MAAM,EAAE;IAC5B,iBAAiB,EAAE,uBAAK,CAAC,MAAM,EAAE;IACjC,KAAK,EAAE,uBAAK,CAAC,MAAM,EAAE;CACtB,CAAC;KACD,KAAK,CAAC,UAAA,IAAI,IAAI,OAAA,CAAC;IACd,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,KAAK;YACf,CAAC,CAAC,qBAAY,wDAEL,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,GAC3D,IAAI,CAAC,KAAK,KACb,OAAO,EAAE,IAAI,CAAC,KAAK,KAErB,IAAI,CAAC,IAAI,CACV;YACH,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;IAChB,CAAC;CACF,CAAC,EAba,CAab,CAAC;KACF,OAAO,CAAC,UAAA,IAAI,IAAI,OAAA,CAAC;IAChB,eAAe,EAAf,UAAgB,KAAU,EAAE,UAAe;QACzC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAC1B,IAAI,CAAC,iBAAiB,GAAG,UAAU,CAAC;IACtC,CAAC;IACD,cAAc,EAAd,UAAe,QAAc;QAC3B,IAAM,KAAK,GACT,CAAC,QAAQ,IAAI,QAAQ,CAAC,KAAK,CAAC;YAC5B,CAAC,QAAQ;gBACP,QAAQ,CAAC,MAAM;gBACf,YAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YACzC,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM;gBACrB,YAAE,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAEnD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;CACF,CAAC,EAhBe,CAgBf,CAAC,CAAC",
    "sourcesContent": [
        "import {Instance, types} from 'mobx-state-tree';\nimport qs from 'qs';\nimport {createObject} from '../utils/helper';\nimport {ServiceStore} from './service';\n\nexport const RootStore = ServiceStore.named('RootStore')\n  .props({\n    runtimeError: types.frozen(),\n    runtimeErrorStack: types.frozen(),\n    query: types.frozen()\n  })\n  .views(self => ({\n    get downStream() {\n      return self.query\n        ? createObject(\n            {\n              ...(self.data && self.data.__super ? self.data.__super : null),\n              ...self.query,\n              __query: self.query\n            },\n            self.data\n          )\n        : self.data;\n    }\n  }))\n  .actions(self => ({\n    setRuntimeError(error: any, errorStack: any) {\n      self.runtimeError = error;\n      self.runtimeErrorStack = errorStack;\n    },\n    updateLocation(location?: any) {\n      const query =\n        (location && location.query) ||\n        (location &&\n          location.search &&\n          qs.parse(location.search.substring(1))) ||\n        (window.location.search &&\n          qs.parse(window.location.search.substring(1)));\n\n      self.query = query;\n    }\n  }));\n\nexport type IRootStore = Instance<typeof RootStore>;\n"
    ]
}