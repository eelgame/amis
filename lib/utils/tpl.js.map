{
    "version": 3,
    "file": "tpl.js",
    "sourceRoot": "",
    "sources": [
        "/src/utils/tpl.ts"
    ],
    "names": [],
    "mappings": ";;;;AAAA,6CAAsE;AACtE,2CAAwD;AAOxD,IAAM,QAAQ,GAEV,EAAE,CAAC;AAEP,SAAgB,kBAAkB,CAAC,IAAY,EAAE,OAAgB;IAC/D,QAAQ,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC;AAC3B,CAAC;AAFD,gDAEC;AAED,SAAgB,MAAM,CACpB,GAAY,EACZ,IAAiB;IAAjB,qBAAA,EAAA,SAAiB;IACjB,cAAmB;SAAnB,UAAmB,EAAnB,qBAAmB,EAAnB,IAAmB;QAAnB,6BAAmB;;IAEnB,IAAI,CAAC,GAAG,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;QACnC,OAAO,EAAE,CAAC;KACX;IAED,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACjC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;QAC/C,IAAI,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAChC,IAAI,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;YACrB,OAAO,OAAO,CAAC,OAAO,OAAf,OAAO,0BAAS,GAAG,EAAE,IAAI,GAAK,IAAI,GAAE;SAC5C;KACF;IAED,OAAO,GAAG,CAAC;AACb,CAAC;AAlBD,wBAkBC;AAED,IAAI,cAAuD,CAAC;AAC5D,SAAgB,eAAe,CAAC,EAA2C;IACzE,cAAc,GAAG,EAAE,CAAC;AACtB,CAAC;AAFD,0CAEC;AAED,4CAA4C;AAC5C,mCAAmC;AACnC,SAAgB,MAAM,CAAC,EAAU,EAAE,IAAY;IAC7C,IAAI,OAAO,cAAc,KAAK,UAAU,EAAE;QACxC,OAAO,cAAc,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;KACjC;IAED,sBAAsB;IACtB,IAAI;QACF,IAAM,EAAE,GAAG,IAAI,QAAQ,CACrB,MAAM,EACN,OAAO,EACP,kBAAe,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,IAAG,EAAE,OAAI,CACjE,CAAC;QACF,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QAClB,OAAO,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,wBAAU,EAAE,CAAC,CAAC;KAC1C;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;QACpB,OAAO,IAAI,CAAC;KACb;AACH,CAAC;AAlBD,wBAkBC;AAED,CAAC,sBAAe,EAAE,qBAAc,CAAC,CAAC,OAAO,CAAC,UAAA,EAAE;IAC1C,IAAM,IAAI,GAAG,EAAE,EAAE,CAAC;IAElB,kBAAkB,CAAC,IAAI,CAAC,IAAI,EAAE;QAC5B,IAAI,EAAE,IAAI,CAAC,IAAI;QACf,OAAO,EAAE,IAAI,CAAC,OAAO;KACtB,CAAC,CAAC;AACL,CAAC,CAAC,CAAC",
    "sourcesContent": [
        "import {register as registerBulitin, getFilters} from './tpl-builtin';\nimport {register as registerLodash} from './tpl-lodash';\n\nexport interface Enginer {\n  test: (tpl: string) => boolean;\n  compile: (tpl: string, data: object, ...rest: Array<any>) => string;\n}\n\nconst enginers: {\n  [propName: string]: Enginer;\n} = {};\n\nexport function registerTplEnginer(name: string, enginer: Enginer) {\n  enginers[name] = enginer;\n}\n\nexport function filter(\n  tpl?: string,\n  data: object = {},\n  ...rest: Array<any>\n): string {\n  if (!tpl || typeof tpl !== 'string') {\n    return '';\n  }\n\n  let keys = Object.keys(enginers);\n  for (let i = 0, len = keys.length; i < len; i++) {\n    let enginer = enginers[keys[i]];\n    if (enginer.test(tpl)) {\n      return enginer.compile(tpl, data, ...rest);\n    }\n  }\n\n  return tpl;\n}\n\nlet customEvalJsFn: (expression: string, data?: any) => any;\nexport function setCustomEvalJs(fn: (expression: string, data?: any) => any) {\n  customEvalJsFn = fn;\n}\n\n// 这个主要用在 formula 里面，用来动态的改变某个值。也很粗暴，建议自己实现。\n// 如果想自己实现，请通过 setCustomEvalJs 来替换。\nexport function evalJS(js: string, data: object): any {\n  if (typeof customEvalJsFn === 'function') {\n    return customEvalJsFn(js, data);\n  }\n\n  /* jshint evil:true */\n  try {\n    const fn = new Function(\n      'data',\n      'utils',\n      `with(data) {${/^\\s*return\\b/.test(js) ? '' : 'return '}${js};}`\n    );\n    data = data || {};\n    return fn.call(data, data, getFilters());\n  } catch (e) {\n    console.warn(js, e);\n    return null;\n  }\n}\n\n[registerBulitin, registerLodash].forEach(fn => {\n  const info = fn();\n\n  registerTplEnginer(info.name, {\n    test: info.test,\n    compile: info.compile\n  });\n});\n"
    ]
}